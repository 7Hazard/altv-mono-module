<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpOrangeSM</name>
    </assembly>
    <members>
        <member name="M:SharpOrange.Plugin.Load(System.String)">
            <summary>
            Load a plugin by name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Create a 3 value Vector, primarily used for positions and rotations
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Addition(SharpOrange.Structs.Vector2,SharpOrange.Structs.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Addition(SharpOrange.Structs.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Subtraction(SharpOrange.Structs.Vector2,SharpOrange.Structs.Vector2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Subtraction(SharpOrange.Structs.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Subtraction(System.Single,SharpOrange.Structs.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Multiply(SharpOrange.Structs.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Multiply(SharpOrange.Structs.Vector2,SharpOrange.Structs.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.op_Division(SharpOrange.Structs.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="left"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector2.Negate(SharpOrange.Structs.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpOrange.Structs.RGB.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create an RGB color object
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:SharpOrange.Structs.VehicleHealth.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a VehicleHealth info object
            </summary>
            <param name="body"></param>
            <param name="engine"></param>
            <param name="tank"></param>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a 3 value Vector, primarily used for positions and rotations
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Addition(SharpOrange.Structs.Vector3,SharpOrange.Structs.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Addition(SharpOrange.Structs.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Subtraction(SharpOrange.Structs.Vector3,SharpOrange.Structs.Vector3)">
            <summary>
            Subtract vector by vector
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Subtraction(SharpOrange.Structs.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Subtraction(System.Single,SharpOrange.Structs.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Multiply(SharpOrange.Structs.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Multiply(SharpOrange.Structs.Vector3,SharpOrange.Structs.Vector3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.op_Division(SharpOrange.Structs.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="left"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.Negate(SharpOrange.Structs.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpOrange.Structs.Vector3.Negative">
            <summary>
            Gets the negated vector
            </summary>
            <returns>The vector facing in the opposite direction.</returns>
        </member>
        <member name="E:SharpOrange.Event.OnServerUnload">
            <summary>
            Triggered before the server unloads/stops
            </summary>
        </member>
        <member name="E:SharpOrange.Event.OnTick">
            <summary>
            Triggered every server tick
            </summary>
        </member>
        <member name="E:SharpOrange.Event.OnServerCommand">
            <summary>
            Triggered when command has been input on server console
            </summary>
        </member>
        <member name="E:SharpOrange.Event.OnEvent">
            <summary>
            Triggered whenever any other client and server event is passed
            </summary>
        </member>
        <member name="M:SharpOrange.Resource.Load(System.String)">
            <summary>
            Load a resource by name
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:SharpOrange.Server.Plugins">
            <summary>
            List of the currently loaded Plugins
            </summary>
        </member>
        <member name="P:SharpOrange.Server.Resources">
            <summary>
            List of the currently loaded Resources
            </summary>
        </member>
        <member name="M:SharpOrange.Server.Print(System.String)">
            <summary>
            Print a server message
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:SharpOrange.Server.Shutdown">
            <summary>
            Shut down the server
            </summary>
        </member>
        <member name="M:SharpOrange.Server.Hash(System.String)">
            <summary>
            Text (string) to hash (long)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Server.TriggerEvent(System.String,System.Object[])">
            <summary>
            Trigger a server event
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharpOrange.Server.TriggerEvent(System.Int64,System.String,System.Object[])">
            <summary>
            Trigger Client event
            </summary>
            <param name="playerid"></param>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharpOrange.Server.TriggerEventForAll(System.String,System.Object[])">
            <summary>
            Triggers a client event for all players
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:SharpOrange.Server.SendMessageToAll(System.String)">
            <summary>
            Broadcast client message to all players
            </summary>
            <param name="message"></param>
        </member>
    </members>
</doc>
