/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OrangeDotNETMono(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OrangeDotNETMono(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OrangeDotNETMono(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


	#include "API.h"
	#include "CVector3.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_M_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)M_STRING;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_INT_get() {
  int jresult ;
  int result;
  
  result = (int)M_INT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)M_BOOL;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_DOUBLE_get() {
  int jresult ;
  int result;
  
  result = (int)M_DOUBLE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_ULONG_get() {
  int jresult ;
  int result;
  
  result = (int)M_ULONG;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_ARRAY_get() {
  int jresult ;
  int result;
  
  result = (int)M_ARRAY;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MArray_ikeys_set(void * jarg1, void * jarg2) {
  MArray *arg1 = (MArray *) 0 ;
  std::map< int,MValue * > *arg2 = (std::map< int,MValue * > *) 0 ;
  
  arg1 = (MArray *)jarg1; 
  arg2 = (std::map< int,MValue * > *)jarg2; 
  if (arg1) (arg1)->ikeys = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MArray_ikeys_get(void * jarg1) {
  void * jresult ;
  MArray *arg1 = (MArray *) 0 ;
  std::map< int,MValue * > *result = 0 ;
  
  arg1 = (MArray *)jarg1; 
  result = (std::map< int,MValue * > *)& ((arg1)->ikeys);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MArray_skeys_set(void * jarg1, void * jarg2) {
  MArray *arg1 = (MArray *) 0 ;
  std::map< std::string,MValue * > *arg2 = (std::map< std::string,MValue * > *) 0 ;
  
  arg1 = (MArray *)jarg1; 
  arg2 = (std::map< std::string,MValue * > *)jarg2; 
  if (arg1) (arg1)->skeys = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MArray_skeys_get(void * jarg1) {
  void * jresult ;
  MArray *arg1 = (MArray *) 0 ;
  std::map< std::string,MValue * > *result = 0 ;
  
  arg1 = (MArray *)jarg1; 
  result = (std::map< std::string,MValue * > *)& ((arg1)->skeys);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MArray() {
  void * jresult ;
  MArray *result = 0 ;
  
  result = (MArray *)new MArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MArray(void * jarg1) {
  MArray *arg1 = (MArray *) 0 ;
  
  arg1 = (MArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MValue_CreateMArray() {
  void * jresult ;
  MValue result;
  
  result = MValue::CreateMArray();
  jresult = new MValue((const MValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MValue__SWIG_0() {
  void * jresult ;
  MValue *result = 0 ;
  
  result = (MValue *)new MValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MValue__SWIG_1(void * jarg1) {
  void * jresult ;
  MValue *arg1 = 0 ;
  MValue *result = 0 ;
  
  arg1 = (MValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MValue const & type is null", 0);
    return 0;
  } 
  result = (MValue *)new MValue((MValue const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MValue__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MValue *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (MValue *)new MValue((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MValue__SWIG_3(int jarg1) {
  void * jresult ;
  int *arg1 = 0 ;
  int temp1 ;
  MValue *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (MValue *)new MValue((int const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MValue__SWIG_4(unsigned int jarg1) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool temp1 ;
  MValue *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (MValue *)new MValue((bool const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MValue__SWIG_5(double jarg1) {
  void * jresult ;
  double *arg1 = 0 ;
  double temp1 ;
  MValue *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  result = (MValue *)new MValue((double const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MValue__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  unsigned long *arg1 = 0 ;
  unsigned long temp1 ;
  MValue *result = 0 ;
  
  temp1 = (unsigned long)jarg1; 
  arg1 = &temp1; 
  result = (MValue *)new MValue((unsigned long const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MValue(void * jarg1) {
  MValue *arg1 = (MValue *) 0 ;
  
  arg1 = (MValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MValue_getString(void * jarg1) {
  char * jresult ;
  MValue *arg1 = (MValue *) 0 ;
  char *result = 0 ;
  
  arg1 = (MValue *)jarg1; 
  result = (char *)(arg1)->getString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MValue_getInt(void * jarg1) {
  int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  int result;
  
  arg1 = (MValue *)jarg1; 
  result = (int)(arg1)->getInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MValue_getBool(void * jarg1) {
  unsigned int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  bool result;
  
  arg1 = (MValue *)jarg1; 
  result = (bool)(arg1)->getBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MValue_getDouble(void * jarg1) {
  double jresult ;
  MValue *arg1 = (MValue *) 0 ;
  double result;
  
  arg1 = (MValue *)jarg1; 
  result = (double)(arg1)->getDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MValue_getULong(void * jarg1) {
  unsigned long jresult ;
  MValue *arg1 = (MValue *) 0 ;
  unsigned long result;
  
  arg1 = (MValue *)jarg1; 
  result = (unsigned long)(arg1)->getULong();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MValue_getArray(void * jarg1) {
  void * jresult ;
  MValue *arg1 = (MValue *) 0 ;
  MArray result;
  
  arg1 = (MValue *)jarg1; 
  result = (arg1)->getArray();
  jresult = new MArray((const MArray &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MValue_isString(void * jarg1) {
  unsigned int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  bool result;
  
  arg1 = (MValue *)jarg1; 
  result = (bool)(arg1)->isString();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MValue_isInt(void * jarg1) {
  unsigned int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  bool result;
  
  arg1 = (MValue *)jarg1; 
  result = (bool)(arg1)->isInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MValue_isBool(void * jarg1) {
  unsigned int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  bool result;
  
  arg1 = (MValue *)jarg1; 
  result = (bool)(arg1)->isBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MValue_isDouble(void * jarg1) {
  unsigned int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  bool result;
  
  arg1 = (MValue *)jarg1; 
  result = (bool)(arg1)->isDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MValue_isULong(void * jarg1) {
  unsigned int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  bool result;
  
  arg1 = (MValue *)jarg1; 
  result = (bool)(arg1)->isULong();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MValue_isArray(void * jarg1) {
  unsigned int jresult ;
  MValue *arg1 = (MValue *) 0 ;
  bool result;
  
  arg1 = (MValue *)jarg1; 
  result = (bool)(arg1)->isArray();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MValue_push(void * jarg1, void * jarg2, void * jarg3) {
  MValue *arg1 = (MValue *) 0 ;
  MValue arg2 ;
  MValue arg3 ;
  MValue *argp2 ;
  MValue *argp3 ;
  
  arg1 = (MValue *)jarg1; 
  argp2 = (MValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MValue", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (MValue *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MValue", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->push(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MValue_get(void * jarg1, void * jarg2) {
  void * jresult ;
  MValue *arg1 = (MValue *) 0 ;
  MValue arg2 ;
  MValue *argp2 ;
  MValue result;
  
  arg1 = (MValue *)jarg1; 
  argp2 = (MValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MValue", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->get(arg2);
  jresult = new MValue((const MValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MValue_type_set(void * jarg1, char jarg2) {
  MValue *arg1 = (MValue *) 0 ;
  char arg2 ;
  
  arg1 = (MValue *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_MValue_type_get(void * jarg1) {
  char jresult ;
  MValue *arg1 = (MValue *) 0 ;
  char result;
  
  arg1 = (MValue *)jarg1; 
  result = (char) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MValue__val_set(void * jarg1, void * jarg2) {
  MValue *arg1 = (MValue *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (MValue *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_val = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MValue__val_get(void * jarg1) {
  void * jresult ;
  MValue *arg1 = (MValue *) 0 ;
  void *result = 0 ;
  
  arg1 = (MValue *)jarg1; 
  result = (void *) ((arg1)->_val);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MValue_counter_set(void * jarg1, void * jarg2) {
  MValue *arg1 = (MValue *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (MValue *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->counter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MValue_counter_get(void * jarg1) {
  void * jresult ;
  MValue *arg1 = (MValue *) 0 ;
  int *result = 0 ;
  
  arg1 = (MValue *)jarg1; 
  result = (int *) ((arg1)->counter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_LoadClientScript(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  APIBase *arg1 = (APIBase *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  std::string *argp2 ;
  
  arg1 = (APIBase *)jarg1; 
  argp2 = (std::string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  (arg1)->LoadClientScript(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_ClientEvent(void * jarg1, char * jarg2, void * jarg3, long jarg4) {
  APIBase *arg1 = (APIBase *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::vector< MValue > > arg3 ;
  long arg4 ;
  std::vector< MValue > *argp3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (std::vector< MValue > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< MValue >", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (long)jarg4; 
  (arg1)->ClientEvent((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_KickPlayer(void * jarg1, long jarg2) {
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->KickPlayer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerPosition(void * jarg1, long jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->SetPlayerPosition(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_APIBase_GetPlayerPosition(void * jarg1, long jarg2) {
  void * jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  CVector3 result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->GetPlayerPosition(arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_IsPlayerInRange(void * jarg1, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->IsPlayerInRange(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerHeading(void * jarg1, long jarg2, float jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->SetPlayerHeading(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_APIBase_GetPlayerHeading(void * jarg1, long jarg2) {
  float jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (float)(arg1)->GetPlayerHeading(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_RemovePlayerWeapons(void * jarg1, long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->RemovePlayerWeapons(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GivePlayerWeapon(void * jarg1, long jarg2, long jarg3, long jarg4) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (bool)(arg1)->GivePlayerWeapon(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GivePlayerAmmo(void * jarg1, long jarg2, long jarg3, long jarg4) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (bool)(arg1)->GivePlayerAmmo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GivePlayerMoney(void * jarg1, long jarg2, long jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  long arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->GivePlayerMoney(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerMoney(void * jarg1, long jarg2, long jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  long arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->SetPlayerMoney(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_ResetPlayerMoney(void * jarg1, long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->ResetPlayerMoney(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_GetPlayerMoney(void * jarg1, long jarg2) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  size_t result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->GetPlayerMoney(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerModel(void * jarg1, long jarg2, long jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  long arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->SetPlayerModel(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_APIBase_GetPlayerModel(void * jarg1, long jarg2) {
  long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (long)(arg1)->GetPlayerModel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerName(void * jarg1, long jarg2, char * jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetPlayerName(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_APIBase_GetPlayerName(void * jarg1, long jarg2) {
  void * jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  std::string result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->GetPlayerName(arg2);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerHealth(void * jarg1, long jarg2, float jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->SetPlayerHealth(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_APIBase_GetPlayerHealth(void * jarg1, long jarg2) {
  float jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (float)(arg1)->GetPlayerHealth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerArmour(void * jarg1, long jarg2, float jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->SetPlayerArmour(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_APIBase_GetPlayerArmour(void * jarg1, long jarg2) {
  float jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (float)(arg1)->GetPlayerArmour(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerColor(void * jarg1, long jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->SetPlayerColor(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetPlayerColor(void * jarg1, long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  unsigned int result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (unsigned int)(arg1)->GetPlayerColor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_BroadcastClientMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->BroadcastClientMessage((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SendClientMessage(void * jarg1, long jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->SendClientMessage(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetPlayerIntoVehicle(void * jarg1, long jarg2, unsigned long jarg3, char jarg4) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  unsigned long arg3 ;
  char arg4 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (unsigned long)jarg3; 
  arg4 = (char)jarg4; 
  result = (bool)(arg1)->SetPlayerIntoVehicle(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_DisablePlayerHud(void * jarg1, long jarg2, unsigned int jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  bool arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DisablePlayerHud(arg2,arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_GetPlayerGUID(void * jarg1, long jarg2) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (unsigned long)(arg1)->GetPlayerGUID(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_Print(void * jarg1, char * jarg2) {
  APIBase *arg1 = (APIBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Print((char const *)arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_APIBase_Hash(void * jarg1, char * jarg2) {
  long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (long)(arg1)->Hash((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_CreateVehicle(void * jarg1, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (unsigned long)(arg1)->CreateVehicle(arg2,arg3,arg4,arg5,arg6);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_DeleteVehicle(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->DeleteVehicle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehiclePosition(void * jarg1, unsigned long jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->SetVehiclePosition(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_APIBase_GetVehiclePosition(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  CVector3 result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->GetVehiclePosition(arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleRotation(void * jarg1, unsigned long jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->SetVehicleRotation(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_APIBase_GetVehicleRotation(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  CVector3 result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->GetVehicleRotation(arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleColours(void * jarg1, unsigned long jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->SetVehicleColours(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetVehicleColours(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  result = (bool)(arg1)->GetVehicleColours(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleTyresBulletproof(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->SetVehicleTyresBulletproof(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetVehicleTyresBulletproof(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->GetVehicleTyresBulletproof(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleCustomPrimaryColor(void * jarg1, unsigned long jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->SetVehicleCustomPrimaryColor(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetVehicleCustomPrimaryColor(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (bool)(arg1)->GetVehicleCustomPrimaryColor(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleCustomSecondaryColor(void * jarg1, unsigned long jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->SetVehicleCustomSecondaryColor(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetVehicleCustomSecondaryColor(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (bool)(arg1)->GetVehicleCustomSecondaryColor(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleEngineStatus(void * jarg1, unsigned long jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->SetVehicleEngineStatus(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetVehicleEngineStatus(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->GetVehicleEngineStatus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleBodyHealth(void * jarg1, unsigned long jarg2, float jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->SetVehicleBodyHealth(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleEngineHealth(void * jarg1, unsigned long jarg2, float jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->SetVehicleEngineHealth(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleTankHealth(void * jarg1, unsigned long jarg2, float jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->SetVehicleTankHealth(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetVehicleHealth(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  result = (bool)(arg1)->GetVehicleHealth(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleNumberPlate(void * jarg1, unsigned long jarg2, char * jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetVehicleNumberPlate(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_APIBase_GetVehicleNumberPlate(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->GetVehicleNumberPlate(arg2);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleNumberPlateStyle(void * jarg1, unsigned long jarg2, int jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->SetVehicleNumberPlateStyle(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_APIBase_GetVehicleNumberPlateStyle(void * jarg1, unsigned long jarg2) {
  int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (int)(arg1)->GetVehicleNumberPlateStyle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleSirenState(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->SetVehicleSirenState(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_GetVehicleSirenState(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->GetVehicleSirenState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleWheelColor(void * jarg1, unsigned long jarg2, int jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->SetVehicleWheelColor(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_APIBase_GetVehicleWheelColor(void * jarg1, unsigned long jarg2) {
  int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (int)(arg1)->GetVehicleWheelColor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetVehicleWheelType(void * jarg1, unsigned long jarg2, int jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->SetVehicleWheelType(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_APIBase_GetVehicleWheelType(void * jarg1, unsigned long jarg2) {
  int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (int)(arg1)->GetVehicleWheelType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_GetVehicleDriver(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->GetVehicleDriver(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_APIBase_GetVehiclePassengers(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  std::vector< unsigned long > result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->GetVehiclePassengers(arg2);
  jresult = new std::vector< unsigned long >((const std::vector< unsigned long > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_CreateObject(void * jarg1, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (unsigned long)(arg1)->CreateObject(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_DeleteObject(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->DeleteObject(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_CreatePickup(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->CreatePickup(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_CreateBlipForAll(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  std::string arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  std::string *argp2 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  argp2 = (std::string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (unsigned long)(arg1)->CreateBlipForAll(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_CreateBlipForPlayer(void * jarg1, long jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  std::string arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  std::string *argp3 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  argp3 = (std::string *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (unsigned long)(arg1)->CreateBlipForPlayer(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_DeleteBlip(void * jarg1, unsigned long jarg2) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->DeleteBlip(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_SetBlipColor(void * jarg1, unsigned long jarg2, int jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBlipColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_SetBlipScale(void * jarg1, unsigned long jarg2, float jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  float arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetBlipScale(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_SetBlipRoute(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBlipRoute(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_SetBlipSprite(void * jarg1, unsigned long jarg2, int jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBlipSprite(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_SetBlipName(void * jarg1, unsigned long jarg2, void * jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  argp3 = (std::string *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetBlipName(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_SetBlipAsShortRange(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBlipAsShortRange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_AttachBlipToPlayer(void * jarg1, unsigned long jarg2, long jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  long arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (long)jarg3; 
  (arg1)->AttachBlipToPlayer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_AttachBlipToVehicle(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (unsigned long)jarg3; 
  (arg1)->AttachBlipToVehicle(arg2,arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_CreateMarkerForAll(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (unsigned long)(arg1)->CreateMarkerForAll(arg2,arg3,arg4,arg5,arg6);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_CreateMarkerForPlayer(void * jarg1, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (unsigned long)(arg1)->CreateMarkerForPlayer(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_APIBase_DeleteMarker(void * jarg1, unsigned long jarg2) {
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->DeleteMarker(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SendNotification(void * jarg1, long jarg2, char * jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SendNotification(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_SetInfoMsg(void * jarg1, long jarg2, char * jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetInfoMsg(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_UnsetInfoMsg(void * jarg1, long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->UnsetInfoMsg(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_Create3DText(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7, float jarg8) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (float)jarg8; 
  result = (unsigned long)(arg1)->Create3DText((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_APIBase_Create3DTextForPlayer(void * jarg1, unsigned long jarg2, char * jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8) {
  unsigned long jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  unsigned long result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (unsigned long)(arg1)->Create3DTextForPlayer(arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_Attach3DTextToVehicle(void * jarg1, unsigned long jarg2, unsigned long jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (unsigned long)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->Attach3DTextToVehicle(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_Attach3DTextToPlayer(void * jarg1, unsigned long jarg2, unsigned long jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (unsigned long)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->Attach3DTextToPlayer(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_Set3DTextContent(void * jarg1, unsigned long jarg2, char * jarg3) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->Set3DTextContent(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_APIBase_Delete3DText(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  APIBase *arg1 = (APIBase *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (APIBase *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->Delete3DText(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_APIBase(void * jarg1) {
  APIBase *arg1 = (APIBase *) 0 ;
  
  arg1 = (APIBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_API_instance_set(void * jarg1) {
  API *arg1 = (API *) 0 ;
  
  arg1 = (API *)jarg1; 
  API::instance = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_API_instance_get() {
  void * jresult ;
  API *result = 0 ;
  
  result = (API *)API::instance;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_API_Set(void * jarg1) {
  API *arg1 = (API *) 0 ;
  
  arg1 = (API *)jarg1; 
  API::Set(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_API_Get() {
  void * jresult ;
  API *result = 0 ;
  
  result = (API *) &API::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_API(void * jarg1) {
  API *arg1 = (API *) 0 ;
  
  arg1 = (API *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vmul_sse(void * jarg1, float jarg2, void * jarg3) {
  float *arg1 = (float *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float *)jarg3; 
  vmul_sse((float const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vdiv_sse(void * jarg1, float jarg2, void * jarg3) {
  float *arg1 = (float *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float *)jarg3; 
  vdiv_sse((float const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vadd_sse(void * jarg1, void * jarg2, void * jarg3) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  vadd_sse((float const *)arg1,(float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vsub_sse(void * jarg1, void * jarg2, void * jarg3) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  vsub_sse((float const *)arg1,(float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vmodmul_sse(void * jarg1, void * jarg2, void * jarg3) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  vmodmul_sse((float const *)arg1,(float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vclamp_sse(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  vclamp_sse((float const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVector3_fX_set(void * jarg1, float jarg2) {
  CVector3 *arg1 = (CVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVector3_fX_get(void * jarg1) {
  float jresult ;
  CVector3 *arg1 = (CVector3 *) 0 ;
  float result;
  
  arg1 = (CVector3 *)jarg1; 
  result = (float) ((arg1)->fX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVector3_fY_set(void * jarg1, float jarg2) {
  CVector3 *arg1 = (CVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVector3_fY_get(void * jarg1) {
  float jresult ;
  CVector3 *arg1 = (CVector3 *) 0 ;
  float result;
  
  arg1 = (CVector3 *)jarg1; 
  result = (float) ((arg1)->fY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVector3_fZ_set(void * jarg1, float jarg2) {
  CVector3 *arg1 = (CVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVector3_fZ_get(void * jarg1) {
  float jresult ;
  CVector3 *arg1 = (CVector3 *) 0 ;
  float result;
  
  arg1 = (CVector3 *)jarg1; 
  result = (float) ((arg1)->fZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVector3__SWIG_0() {
  void * jresult ;
  CVector3 *result = 0 ;
  
  result = (CVector3 *)new CVector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  CVector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (CVector3 *)new CVector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVector3_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  CVector3 *arg1 = (CVector3 *) 0 ;
  bool result;
  
  arg1 = (CVector3 *)jarg1; 
  result = (bool)((CVector3 const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVector3_Length(void * jarg1) {
  float jresult ;
  CVector3 *arg1 = (CVector3 *) 0 ;
  float result;
  
  arg1 = (CVector3 *)jarg1; 
  result = (float)((CVector3 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVector3_Normalize(void * jarg1) {
  CVector3 *arg1 = (CVector3 *) 0 ;
  
  arg1 = (CVector3 *)jarg1; 
  (arg1)->Normalize();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVector3_ToString(void * jarg1) {
  void * jresult ;
  CVector3 *arg1 = (CVector3 *) 0 ;
  std::string result;
  
  arg1 = (CVector3 *)jarg1; 
  result = (arg1)->ToString();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVector3_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  CVector3 arg1 ;
  CVector3 arg2 ;
  CVector3 *argp1 ;
  CVector3 *argp2 ;
  CVector3 result;
  
  argp1 = (CVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (CVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = CVector3::Add(arg1,arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVector3_Subtract(void * jarg1, void * jarg2) {
  void * jresult ;
  CVector3 arg1 ;
  CVector3 arg2 ;
  CVector3 *argp1 ;
  CVector3 *argp2 ;
  CVector3 result;
  
  argp1 = (CVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (CVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = CVector3::Subtract(arg1,arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVector3_Modulate(void * jarg1, void * jarg2) {
  void * jresult ;
  CVector3 arg1 ;
  CVector3 arg2 ;
  CVector3 *argp1 ;
  CVector3 *argp2 ;
  CVector3 result;
  
  argp1 = (CVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (CVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = CVector3::Modulate(arg1,arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVector3_Multiply(void * jarg1, float jarg2) {
  void * jresult ;
  CVector3 arg1 ;
  float arg2 ;
  CVector3 *argp1 ;
  CVector3 result;
  
  argp1 = (CVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  result = CVector3::Multiply(arg1,arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVector3_Divide(void * jarg1, float jarg2) {
  void * jresult ;
  CVector3 arg1 ;
  float arg2 ;
  CVector3 *argp1 ;
  CVector3 result;
  
  argp1 = (CVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  result = CVector3::Divide(arg1,arg2);
  jresult = new CVector3((const CVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CVector3(void * jarg1) {
  CVector3 *arg1 = (CVector3 *) 0 ;
  
  arg1 = (CVector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT APIBase * SWIGSTDCALL CSharp_API_SWIGUpcast(API *jarg1) {
    return (APIBase *)jarg1;
}

#ifdef __cplusplus
}
#endif

