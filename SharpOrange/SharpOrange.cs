// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpOrange
{
    public unsafe partial class CVector3 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float fX;

            [FieldOffset(4)]
            internal float fY;

            [FieldOffset(8)]
            internal float fZ;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0CVector3@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0CVector3@@QEAA@MMM@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, float _fX, float _fY, float _fZ);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0CVector3@@QEAA@AEBV0@@Z")]
            internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Normalize@CVector3@@QEAAXXZ")]
            internal static extern void Normalize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@CVector3@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Add@CVector3@@SA?AV1@V1@0@Z")]
            internal static extern void Add_0(global::System.IntPtr @return, global::SharpOrange.CVector3.__Internal left, global::SharpOrange.CVector3.__Internal right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Subtract@CVector3@@SA?AV1@V1@0@Z")]
            internal static extern void Subtract_0(global::System.IntPtr @return, global::SharpOrange.CVector3.__Internal left, global::SharpOrange.CVector3.__Internal right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Modulate@CVector3@@SA?AV1@V1@0@Z")]
            internal static extern void Modulate_0(global::System.IntPtr @return, global::SharpOrange.CVector3.__Internal left, global::SharpOrange.CVector3.__Internal right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@CVector3@@SA?AV1@V1@M@Z")]
            internal static extern void Multiply_0(global::System.IntPtr @return, global::SharpOrange.CVector3.__Internal value, float scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Divide@CVector3@@SA?AV1@V1@M@Z")]
            internal static extern void Divide_0(global::System.IntPtr @return, global::SharpOrange.CVector3.__Internal value, float scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??HCVector3@@QEBA?AV0@AEBV0@@Z")]
            internal static extern void OperatorPlus_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr vecRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??HCVector3@@QEBA?AV0@M@Z")]
            internal static extern void OperatorPlus_1(global::System.IntPtr instance, global::System.IntPtr @return, float fRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GCVector3@@QEBA?AV0@AEBV0@@Z")]
            internal static extern void OperatorMinus_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr vecRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GCVector3@@QEBA?AV0@M@Z")]
            internal static extern void OperatorMinus_1(global::System.IntPtr instance, global::System.IntPtr @return, float fRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??DCVector3@@QEBA?AV0@AEBV0@@Z")]
            internal static extern void OperatorStar_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr vecRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??DCVector3@@QEBA?AV0@M@Z")]
            internal static extern void OperatorStar_1(global::System.IntPtr instance, global::System.IntPtr @return, float fRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??KCVector3@@QEBA?AV0@AEBV0@@Z")]
            internal static extern void OperatorSlash_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr vecRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??KCVector3@@QEBA?AV0@M@Z")]
            internal static extern void OperatorSlash_1(global::System.IntPtr instance, global::System.IntPtr @return, float fRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GCVector3@@QEBA?AV0@XZ")]
            internal static extern void OperatorMinus_2(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?vmul_sse@@YAXPEBMMPEAM@Z")]
            internal static extern void VmulSse_0(float* a, float b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?vdiv_sse@@YAXPEBMMPEAM@Z")]
            internal static extern void VdivSse_0(float* a, float b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?vadd_sse@@YAXPEBM0PEAM@Z")]
            internal static extern void VaddSse_0(float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?vsub_sse@@YAXPEBM0PEAM@Z")]
            internal static extern void VsubSse_0(float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?vmodmul_sse@@YAXPEBM0PEAM@Z")]
            internal static extern void VmodmulSse_0(float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?vclamp_sse@@YAXPEBMPEAM11@Z")]
            internal static extern void VclampSse_0(float* a, float* min, float* max, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsEmpty@CVector3@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Length@CVector3@@QEBAMXZ")]
            internal static extern float Length_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.CVector3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.CVector3>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpOrange.CVector3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpOrange.CVector3(native.ToPointer(), skipVTables);
        }

        internal static global::SharpOrange.CVector3 __CreateInstance(global::SharpOrange.CVector3.__Internal native, bool skipVTables = false)
        {
            return new global::SharpOrange.CVector3(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpOrange.CVector3.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpOrange.CVector3.__Internal));
            *(global::SharpOrange.CVector3.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CVector3(global::SharpOrange.CVector3.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CVector3(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CVector3()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.CVector3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public CVector3(float _fX, float _fY, float _fZ)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.CVector3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_1((__Instance + __PointerAdjustment), _fX, _fY, _fZ);
        }

        public CVector3(global::SharpOrange.CVector3 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.CVector3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpOrange.CVector3.__Internal*) __Instance) = *((global::SharpOrange.CVector3.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpOrange.CVector3 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Normalize()
        {
            __Internal.Normalize_0((__Instance + __PointerAdjustment));
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internal();
            __Internal.ToString_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(__ret))
            {
                return __basicStringRet.CStr();
            }
        }

        public static global::SharpOrange.CVector3 operator +(global::SharpOrange.CVector3 __op, global::SharpOrange.CVector3 vecRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(vecRight, null))
                throw new global::System.ArgumentNullException("vecRight", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vecRight.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorPlus_0(__arg0, new IntPtr(&__ret), __arg1);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator +(global::SharpOrange.CVector3 __op, float fRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorPlus_1(__arg0, new IntPtr(&__ret), fRight);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator -(global::SharpOrange.CVector3 __op, global::SharpOrange.CVector3 vecRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(vecRight, null))
                throw new global::System.ArgumentNullException("vecRight", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vecRight.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorMinus_0(__arg0, new IntPtr(&__ret), __arg1);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator -(global::SharpOrange.CVector3 __op, float fRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorMinus_1(__arg0, new IntPtr(&__ret), fRight);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator *(global::SharpOrange.CVector3 __op, global::SharpOrange.CVector3 vecRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(vecRight, null))
                throw new global::System.ArgumentNullException("vecRight", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vecRight.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorStar_0(__arg0, new IntPtr(&__ret), __arg1);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator *(global::SharpOrange.CVector3 __op, float fRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorStar_1(__arg0, new IntPtr(&__ret), fRight);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator /(global::SharpOrange.CVector3 __op, global::SharpOrange.CVector3 vecRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(vecRight, null))
                throw new global::System.ArgumentNullException("vecRight", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vecRight.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorSlash_0(__arg0, new IntPtr(&__ret), __arg1);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator /(global::SharpOrange.CVector3 __op, float fRight)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorSlash_1(__arg0, new IntPtr(&__ret), fRight);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 operator -(global::SharpOrange.CVector3 __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.OperatorMinus_2(__arg0, new IntPtr(&__ret));
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 Add(global::SharpOrange.CVector3 left, global::SharpOrange.CVector3 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) right.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.Add_0(new IntPtr(&__ret), __arg0, __arg1);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 Subtract(global::SharpOrange.CVector3 left, global::SharpOrange.CVector3 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) right.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.Subtract_0(new IntPtr(&__ret), __arg0, __arg1);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 Modulate(global::SharpOrange.CVector3 left, global::SharpOrange.CVector3 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) right.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.Modulate_0(new IntPtr(&__ret), __arg0, __arg1);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 Multiply(global::SharpOrange.CVector3 value, float scale)
        {
            var __arg0 = ReferenceEquals(value, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) value.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.Multiply_0(new IntPtr(&__ret), __arg0, scale);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static global::SharpOrange.CVector3 Divide(global::SharpOrange.CVector3 value, float scale)
        {
            var __arg0 = ReferenceEquals(value, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) value.__Instance;
            var __ret = new global::SharpOrange.CVector3.__Internal();
            __Internal.Divide_0(new IntPtr(&__ret), __arg0, scale);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public static void VmulSse(ref float a, float b, ref float r)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmulSse_0(__arg0, b, __arg2);
                }
            }
        }

        public static void VdivSse(ref float a, float b, ref float r)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdivSse_0(__arg0, b, __arg2);
                }
            }
        }

        public static void VaddSse(ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &r)
                    {
                        var __arg2 = __refParamPtr2;
                        __Internal.VaddSse_0(__arg0, __arg1, __arg2);
                    }
                }
            }
        }

        public static void VsubSse(ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &r)
                    {
                        var __arg2 = __refParamPtr2;
                        __Internal.VsubSse_0(__arg0, __arg1, __arg2);
                    }
                }
            }
        }

        public static void VmodmulSse(ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &r)
                    {
                        var __arg2 = __refParamPtr2;
                        __Internal.VmodmulSse_0(__arg0, __arg1, __arg2);
                    }
                }
            }
        }

        public static void VclampSse(ref float a, ref float min, ref float max, ref float r)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &min)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &max)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &r)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.VclampSse_0(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public float FX
        {
            get
            {
                return ((global::SharpOrange.CVector3.__Internal*) __Instance)->fX;
            }

            set
            {
                ((global::SharpOrange.CVector3.__Internal*) __Instance)->fX = value;
            }
        }

        public float FY
        {
            get
            {
                return ((global::SharpOrange.CVector3.__Internal*) __Instance)->fY;
            }

            set
            {
                ((global::SharpOrange.CVector3.__Internal*) __Instance)->fY = value;
            }
        }

        public float FZ
        {
            get
            {
                return ((global::SharpOrange.CVector3.__Internal*) __Instance)->fZ;
            }

            set
            {
                ((global::SharpOrange.CVector3.__Internal*) __Instance)->fZ = value;
            }
        }

        public bool IsEmpty
        {
            get
            {
                var __ret = __Internal.IsEmpty_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float Length
        {
            get
            {
                var __ret = __Internal.Length_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public enum _26
    {
        M_STRING = 0,
        M_INT = 1,
        M_BOOL = 2,
        M_DOUBLE = 3,
        M_ULONG = 4,
        M_ARRAY = 5
    }

    public unsafe partial class MArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.Map.__Internal ikeys;

            [FieldOffset(16)]
            internal global::Std.Map.__Internal skeys;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MArray@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MArray@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor_2(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1MArray@@QEAA@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.MArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.MArray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpOrange.MArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpOrange.MArray(native.ToPointer(), skipVTables);
        }

        internal static global::SharpOrange.MArray __CreateInstance(global::SharpOrange.MArray.__Internal native, bool skipVTables = false)
        {
            return new global::SharpOrange.MArray(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpOrange.MArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MArray.__Internal));
            global::SharpOrange.MArray.__Internal.cctor_0(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MArray(global::SharpOrange.MArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MArray(global::SharpOrange.MArray _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_0((__Instance + __PointerAdjustment), __arg0);
        }

        public MArray()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_2((__Instance + __PointerAdjustment));
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpOrange.MArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class MValue : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal sbyte type;

            [FieldOffset(8)]
            internal global::System.IntPtr _val;

            [FieldOffset(16)]
            internal global::System.IntPtr counter;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MValue@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MValue@@QEAA@AEBV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MValue@@QEAA@PEBD@Z")]
            internal static extern global::System.IntPtr ctor_2(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MValue@@QEAA@AEBH@Z")]
            internal static extern global::System.IntPtr ctor_3(global::System.IntPtr instance, int* val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MValue@@QEAA@AEB_N@Z")]
            internal static extern global::System.IntPtr ctor_4(global::System.IntPtr instance, bool* val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MValue@@QEAA@AEBN@Z")]
            internal static extern global::System.IntPtr ctor_5(global::System.IntPtr instance, double* val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MValue@@QEAA@AEBK@Z")]
            internal static extern global::System.IntPtr ctor_6(global::System.IntPtr instance, uint* val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1MValue@@QEAA@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateMArray@MValue@@SA?AV1@XZ")]
            internal static extern void CreateMArray_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?push@MValue@@QEAAXV1@0@Z")]
            internal static extern void Push_0(global::System.IntPtr instance, global::SharpOrange.MValue.__Internal key, global::SharpOrange.MValue.__Internal val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?get@MValue@@QEAA?AV1@V1@@Z")]
            internal static extern void Get_0(global::System.IntPtr instance, global::System.IntPtr @return, global::SharpOrange.MValue.__Internal key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?getString@MValue@@QEAAPEADXZ")]
            internal static extern sbyte* GetString_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?getInt@MValue@@QEAAHXZ")]
            internal static extern int GetInt_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?getBool@MValue@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBool_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?getDouble@MValue@@QEAANXZ")]
            internal static extern double GetDouble_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?getULong@MValue@@QEAAKXZ")]
            internal static extern uint GetULong_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?getArray@MValue@@QEAA?AUMArray@@XZ")]
            internal static extern void GetArray_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?isString@MValue@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsString_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?isInt@MValue@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInt_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?isBool@MValue@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBool_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?isDouble@MValue@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDouble_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?isULong@MValue@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsULong_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?isArray@MValue@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsArray_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.MValue> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.MValue>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpOrange.MValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpOrange.MValue(native.ToPointer(), skipVTables);
        }

        internal static global::SharpOrange.MValue __CreateInstance(global::SharpOrange.MValue.__Internal native, bool skipVTables = false)
        {
            return new global::SharpOrange.MValue(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpOrange.MValue.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            global::SharpOrange.MValue.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MValue(global::SharpOrange.MValue.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MValue(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MValue()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public MValue(global::SharpOrange.MValue val)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = val.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
        }

        public MValue(string val)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_2((__Instance + __PointerAdjustment), val);
        }

        public MValue(ref int val)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &val)
            {
                var __arg0 = __refParamPtr0;
                __Internal.ctor_3((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public MValue(ref bool val)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (bool* __refParamPtr0 = &val)
            {
                var __arg0 = __refParamPtr0;
                __Internal.ctor_4((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public MValue(ref double val)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (double* __refParamPtr0 = &val)
            {
                var __arg0 = __refParamPtr0;
                __Internal.ctor_5((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public MValue(ref uint val)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.MValue.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (uint* __refParamPtr0 = &val)
            {
                var __arg0 = __refParamPtr0;
                __Internal.ctor_6((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpOrange.MValue __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Push(global::SharpOrange.MValue key, global::SharpOrange.MValue val)
        {
            var __arg0 = ReferenceEquals(key, null) ? new global::SharpOrange.MValue.__Internal() : *(global::SharpOrange.MValue.__Internal*) key.__Instance;
            var __arg1 = ReferenceEquals(val, null) ? new global::SharpOrange.MValue.__Internal() : *(global::SharpOrange.MValue.__Internal*) val.__Instance;
            __Internal.Push_0((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        public global::SharpOrange.MValue Get(global::SharpOrange.MValue key)
        {
            var __arg0 = ReferenceEquals(key, null) ? new global::SharpOrange.MValue.__Internal() : *(global::SharpOrange.MValue.__Internal*) key.__Instance;
            var __ret = new global::SharpOrange.MValue.__Internal();
            __Internal.Get_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::SharpOrange.MValue.__CreateInstance(__ret);
        }

        public static implicit operator global::SharpOrange.MValue(string val)
        {
            return new global::SharpOrange.MValue(val);
        }

        public static implicit operator global::SharpOrange.MValue(int* val)
        {
            return new global::SharpOrange.MValue(ref *val);
        }

        public static implicit operator global::SharpOrange.MValue(bool* val)
        {
            return new global::SharpOrange.MValue(ref *val);
        }

        public static implicit operator global::SharpOrange.MValue(double* val)
        {
            return new global::SharpOrange.MValue(ref *val);
        }

        public static implicit operator global::SharpOrange.MValue(uint* val)
        {
            return new global::SharpOrange.MValue(ref *val);
        }

        public static global::SharpOrange.MValue CreateMArray()
        {
            var __ret = new global::SharpOrange.MValue.__Internal();
            __Internal.CreateMArray_0(new IntPtr(&__ret));
            return global::SharpOrange.MValue.__CreateInstance(__ret);
        }

        public sbyte Type
        {
            get
            {
                return ((global::SharpOrange.MValue.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpOrange.MValue.__Internal*) __Instance)->type = value;
            }
        }

        public global::System.IntPtr Val
        {
            get
            {
                return ((global::SharpOrange.MValue.__Internal*) __Instance)->_val;
            }

            set
            {
                ((global::SharpOrange.MValue.__Internal*) __Instance)->_val = (global::System.IntPtr) value;
            }
        }

        public int* Counter
        {
            get
            {
                return (int*) ((global::SharpOrange.MValue.__Internal*) __Instance)->counter;
            }

            set
            {
                ((global::SharpOrange.MValue.__Internal*) __Instance)->counter = (global::System.IntPtr) value;
            }
        }

        public sbyte* String
        {
            get
            {
                var __ret = __Internal.GetString_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public int Int
        {
            get
            {
                var __ret = __Internal.GetInt_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool Bool
        {
            get
            {
                var __ret = __Internal.GetBool_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double Double
        {
            get
            {
                var __ret = __Internal.GetDouble_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint ULong
        {
            get
            {
                var __ret = __Internal.GetULong_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::SharpOrange.MArray Array
        {
            get
            {
                var __ret = new global::SharpOrange.MArray.__Internal();
                __Internal.GetArray_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::SharpOrange.MArray.__CreateInstance(__ret);
            }
        }

        public bool IsString
        {
            get
            {
                var __ret = __Internal.IsString_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsInt
        {
            get
            {
                var __ret = __Internal.IsInt_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsBool
        {
            get
            {
                var __ret = __Internal.IsBool_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsDouble
        {
            get
            {
                var __ret = __Internal.IsDouble_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsULong
        {
            get
            {
                var __ret = __Internal.IsULong_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsArray
        {
            get
            {
                var __ret = __Internal.IsArray_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe abstract partial class APIBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_APIBase;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0APIBase@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0APIBase@@QEAA@AEBV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.APIBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpOrange.APIBase>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpOrange.APIBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpOrange.APIBaseInternal(native.ToPointer(), skipVTables);
        }

        internal static global::SharpOrange.APIBase __CreateInstance(global::SharpOrange.APIBase.__Internal native, bool skipVTables = false)
        {
            return new global::SharpOrange.APIBaseInternal(native, skipVTables);
        }

        protected APIBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        protected APIBase()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.APIBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "SharpOrange.APIBase");
        }

        protected APIBase(global::SharpOrange.APIBase _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.APIBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "SharpOrange.APIBase");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpOrange.APIBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::SharpOrange.APIBase.__Internal*) __Instance)->vfptr_APIBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract void LoadClientScript(string name, sbyte* buffer, ulong size);

        public abstract void KickPlayer(int playerid);

        public abstract void KickPlayer(int playerid, string reason);

        public abstract bool SetPlayerPosition(int playerid, float x, float y, float z);

        public abstract global::SharpOrange.CVector3 GetPlayerPosition(int playerid);

        public abstract bool IsPlayerInRange(int playerid, float x, float y, float z, float range);

        public abstract bool SetPlayerHeading(int playerid, float angle);

        public abstract float GetPlayerHeading(int playerid);

        public abstract bool RemovePlayerWeapons(int playerid);

        public abstract bool GivePlayerWeapon(int playerid, int weapon, int ammo);

        public abstract bool GivePlayerAmmo(int playerid, int weapon, int ammo);

        public abstract bool GivePlayerMoney(int playerid, int money);

        public abstract bool SetPlayerMoney(int playerid, int money);

        public abstract bool ResetPlayerMoney(int playerid);

        public abstract ulong GetPlayerMoney(int playerid);

        public abstract bool SetPlayerModel(int playerid, int model);

        public abstract int GetPlayerModel(int playerid);

        public abstract bool SetPlayerName(int playerid, string name);

        public abstract string GetPlayerName(int playerid);

        public abstract bool SetPlayerHealth(int playerid, float health);

        public abstract float GetPlayerHealth(int playerid);

        public abstract bool SetPlayerArmour(int playerid, float armour);

        public abstract float GetPlayerArmour(int playerid);

        public abstract bool SetPlayerColor(int playerid, uint color);

        public abstract uint GetPlayerColor(int playerid);

        public abstract void BroadcastClientMessage(string message, uint color);

        public abstract bool SendClientMessage(int playerid, string message, uint color);

        public abstract bool SetPlayerIntoVehicle(int playerid, uint vehicle, sbyte seat);

        public abstract void DisablePlayerHud(int playerid, bool toggle);

        public abstract uint GetPlayerGUID(int playerid);

        public abstract void Print(string message);

        public abstract int Hash(string str);

        public abstract uint CreateVehicle(int hash, float x, float y, float z, float heading);

        public abstract bool DeleteVehicle(uint vehid);

        public abstract bool SetVehiclePosition(uint vehid, float x, float y, float z);

        public abstract global::SharpOrange.CVector3 GetVehiclePosition(uint vehid);

        public abstract bool SetVehicleRotation(uint vehid, float rx, float ry, float rz);

        public abstract global::SharpOrange.CVector3 GetVehicleRotation(uint vehid);

        public abstract bool SetVehicleColours(uint vehid, byte Color1, byte Color2);

        public abstract bool GetVehicleColours(uint vehid, byte* Color1, byte* Color2);

        public abstract bool SetVehicleTyresBulletproof(uint vehid, bool bulletproof);

        public abstract bool GetVehicleTyresBulletproof(uint vehid);

        public abstract bool SetVehicleCustomPrimaryColor(uint vehid, int rColor, int gColor, int bColor);

        public abstract bool GetVehicleCustomPrimaryColor(uint vehid, ref int rColor, ref int gColor, ref int bColor);

        public abstract bool SetVehicleCustomSecondaryColor(uint vehid, int rColor, int gColor, int bColor);

        public abstract bool GetVehicleCustomSecondaryColor(uint vehid, ref int rColor, ref int gColor, ref int bColor);

        public abstract bool SetVehicleEngineStatus(uint vehid, bool status, bool locked);

        public abstract bool GetVehicleEngineStatus(uint vehid);

        public abstract bool SetVehicleLocked(uint vehid, bool locked);

        public abstract bool IsVehicleLocked(uint vehid);

        public abstract bool SetVehicleBodyHealth(uint vehid, float health);

        public abstract bool SetVehicleEngineHealth(uint vehid, float health);

        public abstract bool SetVehicleTankHealth(uint vehid, float health);

        public abstract bool GetVehicleHealth(uint vehid, ref float body, ref float engine, ref float tank);

        public abstract bool SetVehicleNumberPlate(uint vehid, string text);

        public abstract string GetVehicleNumberPlate(uint vehid);

        public abstract bool SetVehicleNumberPlateStyle(uint vehid, int style);

        public abstract int GetVehicleNumberPlateStyle(uint vehid);

        public abstract bool SetVehicleSirenState(uint vehid, bool state);

        public abstract bool GetVehicleSirenState(uint vehid);

        public abstract bool SetVehicleWheelColor(uint vehid, int color);

        public abstract int GetVehicleWheelColor(uint vehid);

        public abstract bool SetVehicleWheelType(uint vehid, int type);

        public abstract int GetVehicleWheelType(uint vehid);

        public abstract int GetVehicleDriver(uint vehid);

        public abstract uint CreateObject(int model, float x, float y, float z, float pitch, float yaw, float roll);

        public abstract bool DeleteObject(uint guid);

        public abstract bool CreatePickup(int type, float x, float y, float z, float scale);

        public abstract uint CreateBlipForAll(string name, float x, float y, float z, float scale, int color, int sprite);

        public abstract uint CreateBlipForPlayer(int playerid, string name, float x, float y, float z, float scale, int color, int sprite);

        public abstract void DeleteBlip(uint guid);

        public abstract void SetBlipColor(uint guid, int color);

        public abstract void SetBlipScale(uint guid, float scale);

        public abstract void SetBlipRoute(uint guid, bool route);

        public abstract void SetBlipSprite(uint guid, int sprite);

        public abstract void SetBlipName(uint guid, string name);

        public abstract void SetBlipAsShortRange(uint guid, bool _short);

        public abstract void AttachBlipToPlayer(uint _guid, int player);

        public abstract void AttachBlipToVehicle(uint _guid, uint vehicle);

        public abstract uint CreateMarkerForAll(float x, float y, float z, float height, float radius);

        public abstract uint CreateMarkerForPlayer(int playerid, float x, float y, float z, float height, float radius);

        public abstract void DeleteMarker(uint guid);

        public abstract bool SendNotification(int playerid, string msg);

        public abstract bool SetInfoMsg(int playerid, string msg);

        public abstract bool UnsetInfoMsg(int playerid);

        public abstract uint Create3DText(string text, float x, float y, float z, int color, int outColor, float fontSize);

        public abstract uint Create3DTextForPlayer(uint player, string text, float x, float y, float z, int color, int outColor);

        public abstract bool Attach3DTextToVehicle(uint textId, uint vehicle, float oX, float oY, float oZ);

        public abstract bool Attach3DTextToPlayer(uint textId, uint player, float oX, float oY, float oZ);

        public abstract bool Set3DTextContent(uint textId, string text);

        public abstract bool Delete3DText(uint textId);

        #region Virtual table interop

        // void LoadClientScript(std::string name, char* buffer, size_t size) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_std_basic_string___Internal_sbytePtr_ulong _LoadClientScript_0DelegateInstance;

        private static void _LoadClientScript_0DelegateHook(global::System.IntPtr instance, global::Std.BasicString.__Internal name, sbyte* buffer, ulong size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                __target.LoadClientScript(__basicStringRet.CStr(), buffer, size);
            }
        }

        // void KickPlayer(long playerid, const char * reason) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_int_string _KickPlayer_1DelegateInstance;

        private static void _KickPlayer_1DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string reason)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.KickPlayer(playerid, reason);
        }

        // void KickPlayer(long playerid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_int _KickPlayer_0DelegateInstance;

        private static void _KickPlayer_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.KickPlayer(playerid);
        }

        // bool SetPlayerPosition(long playerid, float x, float y, float z) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float _SetPlayerPosition_0DelegateInstance;

        private static bool _SetPlayerPosition_0DelegateHook(global::System.IntPtr instance, int playerid, float x, float y, float z)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerPosition(playerid, x, y, z);
            return __ret;
        }

        // CVector3 GetPlayerPosition(long playerid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int _GetPlayerPosition_0DelegateInstance;

        private static void _GetPlayerPosition_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerPosition(playerid);
            *(global::SharpOrange.CVector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) __ret.__Instance;
        }

        // bool IsPlayerInRange(long playerid, float x, float y, float z, float range) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float _IsPlayerInRange_0DelegateInstance;

        private static bool _IsPlayerInRange_0DelegateHook(global::System.IntPtr instance, int playerid, float x, float y, float z, float range)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsPlayerInRange(playerid, x, y, z, range);
            return __ret;
        }

        // bool SetPlayerHeading(long playerid, float angle) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float _SetPlayerHeading_0DelegateInstance;

        private static bool _SetPlayerHeading_0DelegateHook(global::System.IntPtr instance, int playerid, float angle)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerHeading(playerid, angle);
            return __ret;
        }

        // float GetPlayerHeading(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_float_IntPtr_int _GetPlayerHeading_0DelegateInstance;

        private static float _GetPlayerHeading_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerHeading(playerid);
            return __ret;
        }

        // bool RemovePlayerWeapons(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int _RemovePlayerWeapons_0DelegateInstance;

        private static bool _RemovePlayerWeapons_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.RemovePlayerWeapons(playerid);
            return __ret;
        }

        // bool GivePlayerWeapon(long playerid, long weapon, long ammo) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int _GivePlayerWeapon_0DelegateInstance;

        private static bool _GivePlayerWeapon_0DelegateHook(global::System.IntPtr instance, int playerid, int weapon, int ammo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GivePlayerWeapon(playerid, weapon, ammo);
            return __ret;
        }

        // bool GivePlayerAmmo(long playerid, long weapon, long ammo) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int _GivePlayerAmmo_0DelegateInstance;

        private static bool _GivePlayerAmmo_0DelegateHook(global::System.IntPtr instance, int playerid, int weapon, int ammo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GivePlayerAmmo(playerid, weapon, ammo);
            return __ret;
        }

        // bool GivePlayerMoney(long playerid, long money) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int _GivePlayerMoney_0DelegateInstance;

        private static bool _GivePlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid, int money)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GivePlayerMoney(playerid, money);
            return __ret;
        }

        // bool SetPlayerMoney(long playerid, long money) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int _SetPlayerMoney_0DelegateInstance;

        private static bool _SetPlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid, int money)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerMoney(playerid, money);
            return __ret;
        }

        // bool ResetPlayerMoney(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int _ResetPlayerMoney_0DelegateInstance;

        private static bool _ResetPlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ResetPlayerMoney(playerid);
            return __ret;
        }

        // size_t GetPlayerMoney(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_ulong_IntPtr_int _GetPlayerMoney_0DelegateInstance;

        private static ulong _GetPlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerMoney(playerid);
            return __ret;
        }

        // bool SetPlayerModel(long playerid, long model) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int _SetPlayerModel_0DelegateInstance;

        private static bool _SetPlayerModel_0DelegateHook(global::System.IntPtr instance, int playerid, int model)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerModel(playerid, model);
            return __ret;
        }

        // long GetPlayerModel(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_int _GetPlayerModel_0DelegateInstance;

        private static int _GetPlayerModel_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerModel(playerid);
            return __ret;
        }

        // bool SetPlayerName(long playerid, const char * name) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string _SetPlayerName_0DelegateInstance;

        private static bool _SetPlayerName_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string name)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerName(playerid, name);
            return __ret;
        }

        // std::string GetPlayerName(long playerid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int _GetPlayerName_0DelegateInstance;

        private static void _GetPlayerName_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerName(playerid);
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internal*) @return = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
        }

        // bool SetPlayerHealth(long playerid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float _SetPlayerHealth_0DelegateInstance;

        private static bool _SetPlayerHealth_0DelegateHook(global::System.IntPtr instance, int playerid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerHealth(playerid, health);
            return __ret;
        }

        // float GetPlayerHealth(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_float_IntPtr_int _GetPlayerHealth_0DelegateInstance;

        private static float _GetPlayerHealth_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerHealth(playerid);
            return __ret;
        }

        // bool SetPlayerArmour(long playerid, float armour) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float _SetPlayerArmour_0DelegateInstance;

        private static bool _SetPlayerArmour_0DelegateHook(global::System.IntPtr instance, int playerid, float armour)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerArmour(playerid, armour);
            return __ret;
        }

        // float GetPlayerArmour(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_float_IntPtr_int _GetPlayerArmour_0DelegateInstance;

        private static float _GetPlayerArmour_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerArmour(playerid);
            return __ret;
        }

        // bool SetPlayerColor(long playerid, unsigned int color) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint _SetPlayerColor_0DelegateInstance;

        private static bool _SetPlayerColor_0DelegateHook(global::System.IntPtr instance, int playerid, uint color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerColor(playerid, color);
            return __ret;
        }

        // unsigned int GetPlayerColor(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int _GetPlayerColor_0DelegateInstance;

        private static uint _GetPlayerColor_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerColor(playerid);
            return __ret;
        }

        // void BroadcastClientMessage(const char * message, unsigned int color) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_string_uint _BroadcastClientMessage_0DelegateInstance;

        private static void _BroadcastClientMessage_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string message, uint color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.BroadcastClientMessage(message, color);
        }

        // bool SendClientMessage(long playerid, const char * message, unsigned int color) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string_uint _SendClientMessage_0DelegateInstance;

        private static bool _SendClientMessage_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string message, uint color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SendClientMessage(playerid, message, color);
            return __ret;
        }

        // bool SetPlayerIntoVehicle(long playerid, unsigned long vehicle, char seat) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint_sbyte _SetPlayerIntoVehicle_0DelegateInstance;

        private static bool _SetPlayerIntoVehicle_0DelegateHook(global::System.IntPtr instance, int playerid, uint vehicle, sbyte seat)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerIntoVehicle(playerid, vehicle, seat);
            return __ret;
        }

        // void DisablePlayerHud(long playerid, bool toggle) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_int_bool _DisablePlayerHud_0DelegateInstance;

        private static void _DisablePlayerHud_0DelegateHook(global::System.IntPtr instance, int playerid, bool toggle)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DisablePlayerHud(playerid, toggle);
        }

        // unsigned long GetPlayerGUID(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int _GetPlayerGUID_0DelegateInstance;

        private static uint _GetPlayerGUID_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerGUID(playerid);
            return __ret;
        }

        // void Print(const char * message) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_string _Print_0DelegateInstance;

        private static void _Print_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string message)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Print(message);
        }

        // long Hash(const char * str) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_string _Hash_0DelegateInstance;

        private static int _Hash_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string str)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Hash(str);
            return __ret;
        }

        // unsigned long CreateVehicle(long hash, float x, float y, float z, float heading) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float _CreateVehicle_0DelegateInstance;

        private static uint _CreateVehicle_0DelegateHook(global::System.IntPtr instance, int hash, float x, float y, float z, float heading)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateVehicle(hash, x, y, z, heading);
            return __ret;
        }

        // bool DeleteVehicle(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _DeleteVehicle_0DelegateInstance;

        private static bool _DeleteVehicle_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DeleteVehicle(vehid);
            return __ret;
        }

        // bool SetVehiclePosition(unsigned long vehid, float x, float y, float z) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float _SetVehiclePosition_0DelegateInstance;

        private static bool _SetVehiclePosition_0DelegateHook(global::System.IntPtr instance, uint vehid, float x, float y, float z)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehiclePosition(vehid, x, y, z);
            return __ret;
        }

        // CVector3 GetVehiclePosition(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint _GetVehiclePosition_0DelegateInstance;

        private static void _GetVehiclePosition_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehiclePosition(vehid);
            *(global::SharpOrange.CVector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) __ret.__Instance;
        }

        // bool SetVehicleRotation(unsigned long vehid, float rx, float ry, float rz) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float _SetVehicleRotation_0DelegateInstance;

        private static bool _SetVehicleRotation_0DelegateHook(global::System.IntPtr instance, uint vehid, float rx, float ry, float rz)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleRotation(vehid, rx, ry, rz);
            return __ret;
        }

        // CVector3 GetVehicleRotation(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint _GetVehicleRotation_0DelegateInstance;

        private static void _GetVehicleRotation_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleRotation(vehid);
            *(global::SharpOrange.CVector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) __ret.__Instance;
        }

        // bool SetVehicleColours(unsigned long vehid, unsigned char Color1, unsigned char Color2) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_byte_byte _SetVehicleColours_0DelegateInstance;

        private static bool _SetVehicleColours_0DelegateHook(global::System.IntPtr instance, uint vehid, byte Color1, byte Color2)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleColours(vehid, Color1, Color2);
            return __ret;
        }

        // bool GetVehicleColours(unsigned long vehid, unsigned char *Color1, unsigned char *Color2) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bytePtr_bytePtr _GetVehicleColours_0DelegateInstance;

        private static bool _GetVehicleColours_0DelegateHook(global::System.IntPtr instance, uint vehid, byte* Color1, byte* Color2)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleColours(vehid, Color1, Color2);
            return __ret;
        }

        // bool SetVehicleTyresBulletproof(unsigned long vehid, bool bulletproof) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool _SetVehicleTyresBulletproof_0DelegateInstance;

        private static bool _SetVehicleTyresBulletproof_0DelegateHook(global::System.IntPtr instance, uint vehid, bool bulletproof)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleTyresBulletproof(vehid, bulletproof);
            return __ret;
        }

        // bool GetVehicleTyresBulletproof(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _GetVehicleTyresBulletproof_0DelegateInstance;

        private static bool _GetVehicleTyresBulletproof_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleTyresBulletproof(vehid);
            return __ret;
        }

        // bool SetVehicleCustomPrimaryColor(unsigned long vehid, int rColor, int gColor, int bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int _SetVehicleCustomPrimaryColor_0DelegateInstance;

        private static bool _SetVehicleCustomPrimaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int rColor, int gColor, int bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleCustomPrimaryColor(vehid, rColor, gColor, bColor);
            return __ret;
        }

        // bool GetVehicleCustomPrimaryColor(unsigned long vehid, int *rColor, int *gColor, int *bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr _GetVehicleCustomPrimaryColor_0DelegateInstance;

        private static bool _GetVehicleCustomPrimaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int* rColor, int* gColor, int* bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleCustomPrimaryColor(vehid, ref *rColor, ref *gColor, ref *bColor);
            return __ret;
        }

        // bool SetVehicleCustomSecondaryColor(unsigned long vehid, int rColor, int gColor, int bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int _SetVehicleCustomSecondaryColor_0DelegateInstance;

        private static bool _SetVehicleCustomSecondaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int rColor, int gColor, int bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleCustomSecondaryColor(vehid, rColor, gColor, bColor);
            return __ret;
        }

        // bool GetVehicleCustomSecondaryColor(unsigned long vehid, int *rColor, int *gColor, int *bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr _GetVehicleCustomSecondaryColor_0DelegateInstance;

        private static bool _GetVehicleCustomSecondaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int* rColor, int* gColor, int* bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleCustomSecondaryColor(vehid, ref *rColor, ref *gColor, ref *bColor);
            return __ret;
        }

        // bool SetVehicleEngineStatus(unsigned long vehid, bool status, bool locked) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool_bool _SetVehicleEngineStatus_0DelegateInstance;

        private static bool _SetVehicleEngineStatus_0DelegateHook(global::System.IntPtr instance, uint vehid, bool status, bool locked)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleEngineStatus(vehid, status, locked);
            return __ret;
        }

        // bool GetVehicleEngineStatus(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _GetVehicleEngineStatus_0DelegateInstance;

        private static bool _GetVehicleEngineStatus_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleEngineStatus(vehid);
            return __ret;
        }

        // bool SetVehicleLocked(unsigned long vehid, bool locked) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool _SetVehicleLocked_0DelegateInstance;

        private static bool _SetVehicleLocked_0DelegateHook(global::System.IntPtr instance, uint vehid, bool locked)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleLocked(vehid, locked);
            return __ret;
        }

        // bool IsVehicleLocked(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _IsVehicleLocked_0DelegateInstance;

        private static bool _IsVehicleLocked_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsVehicleLocked(vehid);
            return __ret;
        }

        // bool SetVehicleBodyHealth(unsigned long vehid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float _SetVehicleBodyHealth_0DelegateInstance;

        private static bool _SetVehicleBodyHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleBodyHealth(vehid, health);
            return __ret;
        }

        // bool SetVehicleEngineHealth(unsigned long vehid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float _SetVehicleEngineHealth_0DelegateInstance;

        private static bool _SetVehicleEngineHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleEngineHealth(vehid, health);
            return __ret;
        }

        // bool SetVehicleTankHealth(unsigned long vehid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float _SetVehicleTankHealth_0DelegateInstance;

        private static bool _SetVehicleTankHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleTankHealth(vehid, health);
            return __ret;
        }

        // bool GetVehicleHealth(unsigned long vehid, float *body, float *engine, float *tank) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_floatPtr_floatPtr_floatPtr _GetVehicleHealth_0DelegateInstance;

        private static bool _GetVehicleHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float* body, float* engine, float* tank)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleHealth(vehid, ref *body, ref *engine, ref *tank);
            return __ret;
        }

        // bool SetVehicleNumberPlate(unsigned long vehid, const char *text) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string _SetVehicleNumberPlate_0DelegateInstance;

        private static bool _SetVehicleNumberPlate_0DelegateHook(global::System.IntPtr instance, uint vehid, [MarshalAs(UnmanagedType.LPStr)] string text)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleNumberPlate(vehid, text);
            return __ret;
        }

        // std::string GetVehicleNumberPlate(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint _GetVehicleNumberPlate_0DelegateInstance;

        private static void _GetVehicleNumberPlate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleNumberPlate(vehid);
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internal*) @return = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
        }

        // bool SetVehicleNumberPlateStyle(unsigned long vehid, int style) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int _SetVehicleNumberPlateStyle_0DelegateInstance;

        private static bool _SetVehicleNumberPlateStyle_0DelegateHook(global::System.IntPtr instance, uint vehid, int style)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleNumberPlateStyle(vehid, style);
            return __ret;
        }

        // int GetVehicleNumberPlateStyle(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleNumberPlateStyle_0DelegateInstance;

        private static int _GetVehicleNumberPlateStyle_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleNumberPlateStyle(vehid);
            return __ret;
        }

        // bool SetVehicleSirenState(unsigned long vehid, bool state) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool _SetVehicleSirenState_0DelegateInstance;

        private static bool _SetVehicleSirenState_0DelegateHook(global::System.IntPtr instance, uint vehid, bool state)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleSirenState(vehid, state);
            return __ret;
        }

        // bool GetVehicleSirenState(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _GetVehicleSirenState_0DelegateInstance;

        private static bool _GetVehicleSirenState_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleSirenState(vehid);
            return __ret;
        }

        // bool SetVehicleWheelColor(unsigned long vehid, int color) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int _SetVehicleWheelColor_0DelegateInstance;

        private static bool _SetVehicleWheelColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleWheelColor(vehid, color);
            return __ret;
        }

        // int GetVehicleWheelColor(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleWheelColor_0DelegateInstance;

        private static int _GetVehicleWheelColor_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleWheelColor(vehid);
            return __ret;
        }

        // bool SetVehicleWheelType(unsigned long vehid, int type) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int _SetVehicleWheelType_0DelegateInstance;

        private static bool _SetVehicleWheelType_0DelegateHook(global::System.IntPtr instance, uint vehid, int type)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleWheelType(vehid, type);
            return __ret;
        }

        // int GetVehicleWheelType(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleWheelType_0DelegateInstance;

        private static int _GetVehicleWheelType_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleWheelType(vehid);
            return __ret;
        }

        // int GetVehicleDriver(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleDriver_0DelegateInstance;

        private static int _GetVehicleDriver_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleDriver(vehid);
            return __ret;
        }

        // unsigned long CreateObject(long model, float x, float y, float z, float pitch, float yaw, float roll) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float_float _CreateObject_0DelegateInstance;

        private static uint _CreateObject_0DelegateHook(global::System.IntPtr instance, int model, float x, float y, float z, float pitch, float yaw, float roll)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateObject(model, x, y, z, pitch, yaw, roll);
            return __ret;
        }

        // bool DeleteObject(unsigned long guid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _DeleteObject_0DelegateInstance;

        private static bool _DeleteObject_0DelegateHook(global::System.IntPtr instance, uint guid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DeleteObject(guid);
            return __ret;
        }

        // bool CreatePickup(int type, float x, float y, float z, float scale) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float _CreatePickup_0DelegateInstance;

        private static bool _CreatePickup_0DelegateHook(global::System.IntPtr instance, int type, float x, float y, float z, float scale)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreatePickup(type, x, y, z, scale);
            return __ret;
        }

        // unsigned long CreateBlipForAll(std::string name, float x, float y, float z, float scale, int color, int sprite) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_std_basic_string___Internal_float_float_float_float_int_int _CreateBlipForAll_0DelegateInstance;

        private static uint _CreateBlipForAll_0DelegateHook(global::System.IntPtr instance, global::Std.BasicString.__Internal name, float x, float y, float z, float scale, int color, int sprite)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                var __ret = __target.CreateBlipForAll(__basicStringRet.CStr(), x, y, z, scale, color, sprite);
                return __ret;
            }
        }

        // unsigned long CreateBlipForPlayer(long playerid, std::string name, float x, float y, float z, float scale, int color, int sprite) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_std_basic_string___Internal_float_float_float_float_int_int _CreateBlipForPlayer_0DelegateInstance;

        private static uint _CreateBlipForPlayer_0DelegateHook(global::System.IntPtr instance, int playerid, global::Std.BasicString.__Internal name, float x, float y, float z, float scale, int color, int sprite)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                var __ret = __target.CreateBlipForPlayer(playerid, __basicStringRet.CStr(), x, y, z, scale, color, sprite);
                return __ret;
            }
        }

        // void DeleteBlip(unsigned long guid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint _DeleteBlip_0DelegateInstance;

        private static void _DeleteBlip_0DelegateHook(global::System.IntPtr instance, uint guid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteBlip(guid);
        }

        // void SetBlipColor(unsigned long guid, int color) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_int _SetBlipColor_0DelegateInstance;

        private static void _SetBlipColor_0DelegateHook(global::System.IntPtr instance, uint guid, int color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipColor(guid, color);
        }

        // void SetBlipScale(unsigned long guid, float scale) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_float _SetBlipScale_0DelegateInstance;

        private static void _SetBlipScale_0DelegateHook(global::System.IntPtr instance, uint guid, float scale)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipScale(guid, scale);
        }

        // void SetBlipRoute(unsigned long guid, bool route) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_bool _SetBlipRoute_0DelegateInstance;

        private static void _SetBlipRoute_0DelegateHook(global::System.IntPtr instance, uint guid, bool route)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipRoute(guid, route);
        }

        // void SetBlipSprite(unsigned long guid, int sprite) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_int _SetBlipSprite_0DelegateInstance;

        private static void _SetBlipSprite_0DelegateHook(global::System.IntPtr instance, uint guid, int sprite)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipSprite(guid, sprite);
        }

        // void SetBlipName(unsigned long guid, std::string name) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_std_basic_string___Internal _SetBlipName_0DelegateInstance;

        private static void _SetBlipName_0DelegateHook(global::System.IntPtr instance, uint guid, global::Std.BasicString.__Internal name)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase)NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                __target.SetBlipName(guid, __basicStringRet.CStr());
            }
        }

        // void SetBlipAsShortRange(unsigned long guid, bool _short) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_bool _SetBlipAsShortRange_0DelegateInstance;

        private static void _SetBlipAsShortRange_0DelegateHook(global::System.IntPtr instance, uint guid, bool _short)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipAsShortRange(guid, _short);
        }

        // void AttachBlipToPlayer(unsigned long _guid, long player) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_int _AttachBlipToPlayer_0DelegateInstance;

        private static void _AttachBlipToPlayer_0DelegateHook(global::System.IntPtr instance, uint _guid, int player)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AttachBlipToPlayer(_guid, player);
        }

        // void AttachBlipToVehicle(unsigned long _guid, unsigned long vehicle) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_uint _AttachBlipToVehicle_0DelegateInstance;

        private static void _AttachBlipToVehicle_0DelegateHook(global::System.IntPtr instance, uint _guid, uint vehicle)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AttachBlipToVehicle(_guid, vehicle);
        }

        // unsigned long CreateMarkerForAll(float x, float y, float z, float height, float radius) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_float_float_float_float_float _CreateMarkerForAll_0DelegateInstance;

        private static uint _CreateMarkerForAll_0DelegateHook(global::System.IntPtr instance, float x, float y, float z, float height, float radius)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateMarkerForAll(x, y, z, height, radius);
            return __ret;
        }

        // unsigned long CreateMarkerForPlayer(long playerid, float x, float y, float z, float height, float radius) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float _CreateMarkerForPlayer_0DelegateInstance;

        private static uint _CreateMarkerForPlayer_0DelegateHook(global::System.IntPtr instance, int playerid, float x, float y, float z, float height, float radius)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateMarkerForPlayer(playerid, x, y, z, height, radius);
            return __ret;
        }

        // void DeleteMarker(unsigned long guid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint _DeleteMarker_0DelegateInstance;

        private static void _DeleteMarker_0DelegateHook(global::System.IntPtr instance, uint guid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteMarker(guid);
        }

        // bool SendNotification(long playerid, const char * msg) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string _SendNotification_0DelegateInstance;

        private static bool _SendNotification_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SendNotification(playerid, msg);
            return __ret;
        }

        // bool SetInfoMsg(long playerid, const char * msg) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string _SetInfoMsg_0DelegateInstance;

        private static bool _SetInfoMsg_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetInfoMsg(playerid, msg);
            return __ret;
        }

        // bool UnsetInfoMsg(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int _UnsetInfoMsg_0DelegateInstance;

        private static bool _UnsetInfoMsg_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.UnsetInfoMsg(playerid);
            return __ret;
        }

        // unsigned long Create3DText(const char * text, float x, float y, float z, int color, int outColor, float fontSize) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_string_float_float_float_int_int_float _Create3DText_0DelegateInstance;

        private static uint _Create3DText_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string text, float x, float y, float z, int color, int outColor, float fontSize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Create3DText(text, x, y, z, color, outColor, fontSize);
            return __ret;
        }

        // unsigned long Create3DTextForPlayer(unsigned long player, const char * text, float x, float y, float z, int color, int outColor) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_uint_string_float_float_float_int_int _Create3DTextForPlayer_0DelegateInstance;

        private static uint _Create3DTextForPlayer_0DelegateHook(global::System.IntPtr instance, uint player, [MarshalAs(UnmanagedType.LPStr)] string text, float x, float y, float z, int color, int outColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Create3DTextForPlayer(player, text, x, y, z, color, outColor);
            return __ret;
        }

        // bool Attach3DTextToVehicle(unsigned long textId, unsigned long vehicle, float oX, float oY, float oZ) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float _Attach3DTextToVehicle_0DelegateInstance;

        private static bool _Attach3DTextToVehicle_0DelegateHook(global::System.IntPtr instance, uint textId, uint vehicle, float oX, float oY, float oZ)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Attach3DTextToVehicle(textId, vehicle, oX, oY, oZ);
            return __ret;
        }

        // bool Attach3DTextToPlayer(unsigned long textId, unsigned long player, float oX, float oY, float oZ) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float _Attach3DTextToPlayer_0DelegateInstance;

        private static bool _Attach3DTextToPlayer_0DelegateHook(global::System.IntPtr instance, uint textId, uint player, float oX, float oY, float oZ)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Attach3DTextToPlayer(textId, player, oX, oY, oZ);
            return __ret;
        }

        // bool Set3DTextContent(unsigned long textId, const char * text) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string _Set3DTextContent_0DelegateInstance;

        private static bool _Set3DTextContent_0DelegateHook(global::System.IntPtr instance, uint textId, [MarshalAs(UnmanagedType.LPStr)] string text)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Set3DTextContent(textId, text);
            return __ret;
        }

        // bool Delete3DText(unsigned long textId) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _Delete3DText_0DelegateInstance;

        private static bool _Delete3DText_0DelegateHook(global::System.IntPtr instance, uint textId)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.APIBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Delete3DText(textId);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[91];
                _LoadClientScript_0DelegateInstance += _LoadClientScript_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_LoadClientScript_0DelegateInstance).ToPointer();
                _KickPlayer_1DelegateInstance += _KickPlayer_1DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_KickPlayer_1DelegateInstance).ToPointer();
                _KickPlayer_0DelegateInstance += _KickPlayer_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_KickPlayer_0DelegateInstance).ToPointer();
                _SetPlayerPosition_0DelegateInstance += _SetPlayerPosition_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetPlayerPosition_0DelegateInstance).ToPointer();
                _GetPlayerPosition_0DelegateInstance += _GetPlayerPosition_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetPlayerPosition_0DelegateInstance).ToPointer();
                _IsPlayerInRange_0DelegateInstance += _IsPlayerInRange_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_IsPlayerInRange_0DelegateInstance).ToPointer();
                _SetPlayerHeading_0DelegateInstance += _SetPlayerHeading_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_SetPlayerHeading_0DelegateInstance).ToPointer();
                _GetPlayerHeading_0DelegateInstance += _GetPlayerHeading_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetPlayerHeading_0DelegateInstance).ToPointer();
                _RemovePlayerWeapons_0DelegateInstance += _RemovePlayerWeapons_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_RemovePlayerWeapons_0DelegateInstance).ToPointer();
                _GivePlayerWeapon_0DelegateInstance += _GivePlayerWeapon_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GivePlayerWeapon_0DelegateInstance).ToPointer();
                _GivePlayerAmmo_0DelegateInstance += _GivePlayerAmmo_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GivePlayerAmmo_0DelegateInstance).ToPointer();
                _GivePlayerMoney_0DelegateInstance += _GivePlayerMoney_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_GivePlayerMoney_0DelegateInstance).ToPointer();
                _SetPlayerMoney_0DelegateInstance += _SetPlayerMoney_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_SetPlayerMoney_0DelegateInstance).ToPointer();
                _ResetPlayerMoney_0DelegateInstance += _ResetPlayerMoney_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ResetPlayerMoney_0DelegateInstance).ToPointer();
                _GetPlayerMoney_0DelegateInstance += _GetPlayerMoney_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetPlayerMoney_0DelegateInstance).ToPointer();
                _SetPlayerModel_0DelegateInstance += _SetPlayerModel_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_SetPlayerModel_0DelegateInstance).ToPointer();
                _GetPlayerModel_0DelegateInstance += _GetPlayerModel_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_GetPlayerModel_0DelegateInstance).ToPointer();
                _SetPlayerName_0DelegateInstance += _SetPlayerName_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_SetPlayerName_0DelegateInstance).ToPointer();
                _GetPlayerName_0DelegateInstance += _GetPlayerName_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_GetPlayerName_0DelegateInstance).ToPointer();
                _SetPlayerHealth_0DelegateInstance += _SetPlayerHealth_0DelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_SetPlayerHealth_0DelegateInstance).ToPointer();
                _GetPlayerHealth_0DelegateInstance += _GetPlayerHealth_0DelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetPlayerHealth_0DelegateInstance).ToPointer();
                _SetPlayerArmour_0DelegateInstance += _SetPlayerArmour_0DelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_SetPlayerArmour_0DelegateInstance).ToPointer();
                _GetPlayerArmour_0DelegateInstance += _GetPlayerArmour_0DelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_GetPlayerArmour_0DelegateInstance).ToPointer();
                _SetPlayerColor_0DelegateInstance += _SetPlayerColor_0DelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_SetPlayerColor_0DelegateInstance).ToPointer();
                _GetPlayerColor_0DelegateInstance += _GetPlayerColor_0DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_GetPlayerColor_0DelegateInstance).ToPointer();
                _BroadcastClientMessage_0DelegateInstance += _BroadcastClientMessage_0DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_BroadcastClientMessage_0DelegateInstance).ToPointer();
                _SendClientMessage_0DelegateInstance += _SendClientMessage_0DelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_SendClientMessage_0DelegateInstance).ToPointer();
                _SetPlayerIntoVehicle_0DelegateInstance += _SetPlayerIntoVehicle_0DelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_SetPlayerIntoVehicle_0DelegateInstance).ToPointer();
                _DisablePlayerHud_0DelegateInstance += _DisablePlayerHud_0DelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_DisablePlayerHud_0DelegateInstance).ToPointer();
                _GetPlayerGUID_0DelegateInstance += _GetPlayerGUID_0DelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_GetPlayerGUID_0DelegateInstance).ToPointer();
                _Print_0DelegateInstance += _Print_0DelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_Print_0DelegateInstance).ToPointer();
                _Hash_0DelegateInstance += _Hash_0DelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_Hash_0DelegateInstance).ToPointer();
                _CreateVehicle_0DelegateInstance += _CreateVehicle_0DelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_CreateVehicle_0DelegateInstance).ToPointer();
                _DeleteVehicle_0DelegateInstance += _DeleteVehicle_0DelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_DeleteVehicle_0DelegateInstance).ToPointer();
                _SetVehiclePosition_0DelegateInstance += _SetVehiclePosition_0DelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_SetVehiclePosition_0DelegateInstance).ToPointer();
                _GetVehiclePosition_0DelegateInstance += _GetVehiclePosition_0DelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_GetVehiclePosition_0DelegateInstance).ToPointer();
                _SetVehicleRotation_0DelegateInstance += _SetVehicleRotation_0DelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_SetVehicleRotation_0DelegateInstance).ToPointer();
                _GetVehicleRotation_0DelegateInstance += _GetVehicleRotation_0DelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_GetVehicleRotation_0DelegateInstance).ToPointer();
                _SetVehicleColours_0DelegateInstance += _SetVehicleColours_0DelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_SetVehicleColours_0DelegateInstance).ToPointer();
                _GetVehicleColours_0DelegateInstance += _GetVehicleColours_0DelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_GetVehicleColours_0DelegateInstance).ToPointer();
                _SetVehicleTyresBulletproof_0DelegateInstance += _SetVehicleTyresBulletproof_0DelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_SetVehicleTyresBulletproof_0DelegateInstance).ToPointer();
                _GetVehicleTyresBulletproof_0DelegateInstance += _GetVehicleTyresBulletproof_0DelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_GetVehicleTyresBulletproof_0DelegateInstance).ToPointer();
                _SetVehicleCustomPrimaryColor_0DelegateInstance += _SetVehicleCustomPrimaryColor_0DelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_SetVehicleCustomPrimaryColor_0DelegateInstance).ToPointer();
                _GetVehicleCustomPrimaryColor_0DelegateInstance += _GetVehicleCustomPrimaryColor_0DelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_GetVehicleCustomPrimaryColor_0DelegateInstance).ToPointer();
                _SetVehicleCustomSecondaryColor_0DelegateInstance += _SetVehicleCustomSecondaryColor_0DelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_SetVehicleCustomSecondaryColor_0DelegateInstance).ToPointer();
                _GetVehicleCustomSecondaryColor_0DelegateInstance += _GetVehicleCustomSecondaryColor_0DelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_GetVehicleCustomSecondaryColor_0DelegateInstance).ToPointer();
                _SetVehicleEngineStatus_0DelegateInstance += _SetVehicleEngineStatus_0DelegateHook;
                _Thunks[46] = Marshal.GetFunctionPointerForDelegate(_SetVehicleEngineStatus_0DelegateInstance).ToPointer();
                _GetVehicleEngineStatus_0DelegateInstance += _GetVehicleEngineStatus_0DelegateHook;
                _Thunks[47] = Marshal.GetFunctionPointerForDelegate(_GetVehicleEngineStatus_0DelegateInstance).ToPointer();
                _SetVehicleLocked_0DelegateInstance += _SetVehicleLocked_0DelegateHook;
                _Thunks[48] = Marshal.GetFunctionPointerForDelegate(_SetVehicleLocked_0DelegateInstance).ToPointer();
                _IsVehicleLocked_0DelegateInstance += _IsVehicleLocked_0DelegateHook;
                _Thunks[49] = Marshal.GetFunctionPointerForDelegate(_IsVehicleLocked_0DelegateInstance).ToPointer();
                _SetVehicleBodyHealth_0DelegateInstance += _SetVehicleBodyHealth_0DelegateHook;
                _Thunks[50] = Marshal.GetFunctionPointerForDelegate(_SetVehicleBodyHealth_0DelegateInstance).ToPointer();
                _SetVehicleEngineHealth_0DelegateInstance += _SetVehicleEngineHealth_0DelegateHook;
                _Thunks[51] = Marshal.GetFunctionPointerForDelegate(_SetVehicleEngineHealth_0DelegateInstance).ToPointer();
                _SetVehicleTankHealth_0DelegateInstance += _SetVehicleTankHealth_0DelegateHook;
                _Thunks[52] = Marshal.GetFunctionPointerForDelegate(_SetVehicleTankHealth_0DelegateInstance).ToPointer();
                _GetVehicleHealth_0DelegateInstance += _GetVehicleHealth_0DelegateHook;
                _Thunks[53] = Marshal.GetFunctionPointerForDelegate(_GetVehicleHealth_0DelegateInstance).ToPointer();
                _SetVehicleNumberPlate_0DelegateInstance += _SetVehicleNumberPlate_0DelegateHook;
                _Thunks[54] = Marshal.GetFunctionPointerForDelegate(_SetVehicleNumberPlate_0DelegateInstance).ToPointer();
                _GetVehicleNumberPlate_0DelegateInstance += _GetVehicleNumberPlate_0DelegateHook;
                _Thunks[55] = Marshal.GetFunctionPointerForDelegate(_GetVehicleNumberPlate_0DelegateInstance).ToPointer();
                _SetVehicleNumberPlateStyle_0DelegateInstance += _SetVehicleNumberPlateStyle_0DelegateHook;
                _Thunks[56] = Marshal.GetFunctionPointerForDelegate(_SetVehicleNumberPlateStyle_0DelegateInstance).ToPointer();
                _GetVehicleNumberPlateStyle_0DelegateInstance += _GetVehicleNumberPlateStyle_0DelegateHook;
                _Thunks[57] = Marshal.GetFunctionPointerForDelegate(_GetVehicleNumberPlateStyle_0DelegateInstance).ToPointer();
                _SetVehicleSirenState_0DelegateInstance += _SetVehicleSirenState_0DelegateHook;
                _Thunks[58] = Marshal.GetFunctionPointerForDelegate(_SetVehicleSirenState_0DelegateInstance).ToPointer();
                _GetVehicleSirenState_0DelegateInstance += _GetVehicleSirenState_0DelegateHook;
                _Thunks[59] = Marshal.GetFunctionPointerForDelegate(_GetVehicleSirenState_0DelegateInstance).ToPointer();
                _SetVehicleWheelColor_0DelegateInstance += _SetVehicleWheelColor_0DelegateHook;
                _Thunks[60] = Marshal.GetFunctionPointerForDelegate(_SetVehicleWheelColor_0DelegateInstance).ToPointer();
                _GetVehicleWheelColor_0DelegateInstance += _GetVehicleWheelColor_0DelegateHook;
                _Thunks[61] = Marshal.GetFunctionPointerForDelegate(_GetVehicleWheelColor_0DelegateInstance).ToPointer();
                _SetVehicleWheelType_0DelegateInstance += _SetVehicleWheelType_0DelegateHook;
                _Thunks[62] = Marshal.GetFunctionPointerForDelegate(_SetVehicleWheelType_0DelegateInstance).ToPointer();
                _GetVehicleWheelType_0DelegateInstance += _GetVehicleWheelType_0DelegateHook;
                _Thunks[63] = Marshal.GetFunctionPointerForDelegate(_GetVehicleWheelType_0DelegateInstance).ToPointer();
                _GetVehicleDriver_0DelegateInstance += _GetVehicleDriver_0DelegateHook;
                _Thunks[64] = Marshal.GetFunctionPointerForDelegate(_GetVehicleDriver_0DelegateInstance).ToPointer();
                _CreateObject_0DelegateInstance += _CreateObject_0DelegateHook;
                _Thunks[65] = Marshal.GetFunctionPointerForDelegate(_CreateObject_0DelegateInstance).ToPointer();
                _DeleteObject_0DelegateInstance += _DeleteObject_0DelegateHook;
                _Thunks[66] = Marshal.GetFunctionPointerForDelegate(_DeleteObject_0DelegateInstance).ToPointer();
                _CreatePickup_0DelegateInstance += _CreatePickup_0DelegateHook;
                _Thunks[67] = Marshal.GetFunctionPointerForDelegate(_CreatePickup_0DelegateInstance).ToPointer();
                _CreateBlipForAll_0DelegateInstance += _CreateBlipForAll_0DelegateHook;
                _Thunks[68] = Marshal.GetFunctionPointerForDelegate(_CreateBlipForAll_0DelegateInstance).ToPointer();
                _CreateBlipForPlayer_0DelegateInstance += _CreateBlipForPlayer_0DelegateHook;
                _Thunks[69] = Marshal.GetFunctionPointerForDelegate(_CreateBlipForPlayer_0DelegateInstance).ToPointer();
                _DeleteBlip_0DelegateInstance += _DeleteBlip_0DelegateHook;
                _Thunks[70] = Marshal.GetFunctionPointerForDelegate(_DeleteBlip_0DelegateInstance).ToPointer();
                _SetBlipColor_0DelegateInstance += _SetBlipColor_0DelegateHook;
                _Thunks[71] = Marshal.GetFunctionPointerForDelegate(_SetBlipColor_0DelegateInstance).ToPointer();
                _SetBlipScale_0DelegateInstance += _SetBlipScale_0DelegateHook;
                _Thunks[72] = Marshal.GetFunctionPointerForDelegate(_SetBlipScale_0DelegateInstance).ToPointer();
                _SetBlipRoute_0DelegateInstance += _SetBlipRoute_0DelegateHook;
                _Thunks[73] = Marshal.GetFunctionPointerForDelegate(_SetBlipRoute_0DelegateInstance).ToPointer();
                _SetBlipSprite_0DelegateInstance += _SetBlipSprite_0DelegateHook;
                _Thunks[74] = Marshal.GetFunctionPointerForDelegate(_SetBlipSprite_0DelegateInstance).ToPointer();
                _SetBlipName_0DelegateInstance += _SetBlipName_0DelegateHook;
                _Thunks[75] = Marshal.GetFunctionPointerForDelegate(_SetBlipName_0DelegateInstance).ToPointer();
                _SetBlipAsShortRange_0DelegateInstance += _SetBlipAsShortRange_0DelegateHook;
                _Thunks[76] = Marshal.GetFunctionPointerForDelegate(_SetBlipAsShortRange_0DelegateInstance).ToPointer();
                _AttachBlipToPlayer_0DelegateInstance += _AttachBlipToPlayer_0DelegateHook;
                _Thunks[77] = Marshal.GetFunctionPointerForDelegate(_AttachBlipToPlayer_0DelegateInstance).ToPointer();
                _AttachBlipToVehicle_0DelegateInstance += _AttachBlipToVehicle_0DelegateHook;
                _Thunks[78] = Marshal.GetFunctionPointerForDelegate(_AttachBlipToVehicle_0DelegateInstance).ToPointer();
                _CreateMarkerForAll_0DelegateInstance += _CreateMarkerForAll_0DelegateHook;
                _Thunks[79] = Marshal.GetFunctionPointerForDelegate(_CreateMarkerForAll_0DelegateInstance).ToPointer();
                _CreateMarkerForPlayer_0DelegateInstance += _CreateMarkerForPlayer_0DelegateHook;
                _Thunks[80] = Marshal.GetFunctionPointerForDelegate(_CreateMarkerForPlayer_0DelegateInstance).ToPointer();
                _DeleteMarker_0DelegateInstance += _DeleteMarker_0DelegateHook;
                _Thunks[81] = Marshal.GetFunctionPointerForDelegate(_DeleteMarker_0DelegateInstance).ToPointer();
                _SendNotification_0DelegateInstance += _SendNotification_0DelegateHook;
                _Thunks[82] = Marshal.GetFunctionPointerForDelegate(_SendNotification_0DelegateInstance).ToPointer();
                _SetInfoMsg_0DelegateInstance += _SetInfoMsg_0DelegateHook;
                _Thunks[83] = Marshal.GetFunctionPointerForDelegate(_SetInfoMsg_0DelegateInstance).ToPointer();
                _UnsetInfoMsg_0DelegateInstance += _UnsetInfoMsg_0DelegateHook;
                _Thunks[84] = Marshal.GetFunctionPointerForDelegate(_UnsetInfoMsg_0DelegateInstance).ToPointer();
                _Create3DText_0DelegateInstance += _Create3DText_0DelegateHook;
                _Thunks[85] = Marshal.GetFunctionPointerForDelegate(_Create3DText_0DelegateInstance).ToPointer();
                _Create3DTextForPlayer_0DelegateInstance += _Create3DTextForPlayer_0DelegateHook;
                _Thunks[86] = Marshal.GetFunctionPointerForDelegate(_Create3DTextForPlayer_0DelegateInstance).ToPointer();
                _Attach3DTextToVehicle_0DelegateInstance += _Attach3DTextToVehicle_0DelegateHook;
                _Thunks[87] = Marshal.GetFunctionPointerForDelegate(_Attach3DTextToVehicle_0DelegateInstance).ToPointer();
                _Attach3DTextToPlayer_0DelegateInstance += _Attach3DTextToPlayer_0DelegateHook;
                _Thunks[88] = Marshal.GetFunctionPointerForDelegate(_Attach3DTextToPlayer_0DelegateInstance).ToPointer();
                _Set3DTextContent_0DelegateInstance += _Set3DTextContent_0DelegateHook;
                _Thunks[89] = Marshal.GetFunctionPointerForDelegate(_Set3DTextContent_0DelegateInstance).ToPointer();
                _Delete3DText_0DelegateInstance += _Delete3DText_0DelegateHook;
                _Thunks[90] = Marshal.GetFunctionPointerForDelegate(_Delete3DText_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(94 * 8);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                *(void**) (vfptr0 + 24) = _Thunks[1];
                *(void**) (vfptr0 + 32) = _Thunks[2];
                *(void**) (vfptr0 + 40) = _Thunks[3];
                *(void**) (vfptr0 + 48) = _Thunks[4];
                *(void**) (vfptr0 + 56) = _Thunks[5];
                *(void**) (vfptr0 + 64) = _Thunks[6];
                *(void**) (vfptr0 + 72) = _Thunks[7];
                *(void**) (vfptr0 + 80) = _Thunks[8];
                *(void**) (vfptr0 + 88) = _Thunks[9];
                *(void**) (vfptr0 + 96) = _Thunks[10];
                *(void**) (vfptr0 + 104) = _Thunks[11];
                *(void**) (vfptr0 + 112) = _Thunks[12];
                *(void**) (vfptr0 + 120) = _Thunks[13];
                *(void**) (vfptr0 + 128) = _Thunks[14];
                *(void**) (vfptr0 + 136) = _Thunks[15];
                *(void**) (vfptr0 + 144) = _Thunks[16];
                *(void**) (vfptr0 + 152) = _Thunks[17];
                *(void**) (vfptr0 + 160) = _Thunks[18];
                *(void**) (vfptr0 + 168) = _Thunks[19];
                *(void**) (vfptr0 + 176) = _Thunks[20];
                *(void**) (vfptr0 + 184) = _Thunks[21];
                *(void**) (vfptr0 + 192) = _Thunks[22];
                *(void**) (vfptr0 + 200) = _Thunks[23];
                *(void**) (vfptr0 + 208) = _Thunks[24];
                *(void**) (vfptr0 + 216) = _Thunks[25];
                *(void**) (vfptr0 + 224) = _Thunks[26];
                *(void**) (vfptr0 + 232) = _Thunks[27];
                *(void**) (vfptr0 + 240) = _Thunks[28];
                *(void**) (vfptr0 + 248) = _Thunks[29];
                *(void**) (vfptr0 + 256) = _Thunks[30];
                *(void**) (vfptr0 + 264) = _Thunks[31];
                *(void**) (vfptr0 + 272) = _Thunks[32];
                *(void**) (vfptr0 + 280) = _Thunks[33];
                *(void**) (vfptr0 + 288) = _Thunks[34];
                *(void**) (vfptr0 + 296) = _Thunks[35];
                *(void**) (vfptr0 + 304) = _Thunks[36];
                *(void**) (vfptr0 + 312) = _Thunks[37];
                *(void**) (vfptr0 + 320) = _Thunks[38];
                *(void**) (vfptr0 + 328) = _Thunks[39];
                *(void**) (vfptr0 + 336) = _Thunks[40];
                *(void**) (vfptr0 + 344) = _Thunks[41];
                *(void**) (vfptr0 + 352) = _Thunks[42];
                *(void**) (vfptr0 + 360) = _Thunks[43];
                *(void**) (vfptr0 + 368) = _Thunks[44];
                *(void**) (vfptr0 + 376) = _Thunks[45];
                *(void**) (vfptr0 + 384) = _Thunks[46];
                *(void**) (vfptr0 + 392) = _Thunks[47];
                *(void**) (vfptr0 + 400) = _Thunks[48];
                *(void**) (vfptr0 + 408) = _Thunks[49];
                *(void**) (vfptr0 + 416) = _Thunks[50];
                *(void**) (vfptr0 + 424) = _Thunks[51];
                *(void**) (vfptr0 + 432) = _Thunks[52];
                *(void**) (vfptr0 + 440) = _Thunks[53];
                *(void**) (vfptr0 + 448) = _Thunks[54];
                *(void**) (vfptr0 + 456) = _Thunks[55];
                *(void**) (vfptr0 + 464) = _Thunks[56];
                *(void**) (vfptr0 + 472) = _Thunks[57];
                *(void**) (vfptr0 + 480) = _Thunks[58];
                *(void**) (vfptr0 + 488) = _Thunks[59];
                *(void**) (vfptr0 + 496) = _Thunks[60];
                *(void**) (vfptr0 + 504) = _Thunks[61];
                *(void**) (vfptr0 + 512) = _Thunks[62];
                *(void**) (vfptr0 + 520) = _Thunks[63];
                *(void**) (vfptr0 + 528) = _Thunks[64];
                *(void**) (vfptr0 + 536) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 536);
                *(void**) (vfptr0 + 544) = _Thunks[65];
                *(void**) (vfptr0 + 552) = _Thunks[66];
                *(void**) (vfptr0 + 560) = _Thunks[67];
                *(void**) (vfptr0 + 568) = _Thunks[68];
                *(void**) (vfptr0 + 576) = _Thunks[69];
                *(void**) (vfptr0 + 584) = _Thunks[70];
                *(void**) (vfptr0 + 592) = _Thunks[71];
                *(void**) (vfptr0 + 600) = _Thunks[72];
                *(void**) (vfptr0 + 608) = _Thunks[73];
                *(void**) (vfptr0 + 616) = _Thunks[74];
                *(void**) (vfptr0 + 624) = _Thunks[75];
                *(void**) (vfptr0 + 632) = _Thunks[76];
                *(void**) (vfptr0 + 640) = _Thunks[77];
                *(void**) (vfptr0 + 648) = _Thunks[78];
                *(void**) (vfptr0 + 656) = _Thunks[79];
                *(void**) (vfptr0 + 664) = _Thunks[80];
                *(void**) (vfptr0 + 672) = _Thunks[81];
                *(void**) (vfptr0 + 680) = _Thunks[82];
                *(void**) (vfptr0 + 688) = _Thunks[83];
                *(void**) (vfptr0 + 696) = _Thunks[84];
                *(void**) (vfptr0 + 704) = _Thunks[85];
                *(void**) (vfptr0 + 712) = _Thunks[86];
                *(void**) (vfptr0 + 720) = _Thunks[87];
                *(void**) (vfptr0 + 728) = _Thunks[88];
                *(void**) (vfptr0 + 736) = _Thunks[89];
                *(void**) (vfptr0 + 744) = _Thunks[90];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe abstract partial class API : global::SharpOrange.APIBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_APIBase;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0API@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0API@@QEAA@AEBV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Set@API@@SAXPEAV1@@Z")]
            internal static extern void Set_0(global::System.IntPtr api);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SharpOrange", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@API@@SAAEAV1@XZ")]
            internal static extern global::System.IntPtr Get_0();
        }

        internal static new global::SharpOrange.API __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpOrange.APIInternal(native.ToPointer(), skipVTables);
        }

        internal static global::SharpOrange.API __CreateInstance(global::SharpOrange.API.__Internal native, bool skipVTables = false)
        {
            return new global::SharpOrange.APIInternal(native, skipVTables);
        }

        protected API(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        protected API()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.API.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "SharpOrange.API");
        }

        protected API(global::SharpOrange.API _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpOrange.API.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "SharpOrange.API");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpOrange.APIBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::SharpOrange.API.__Internal*) __Instance)->vfptr_APIBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static void Set(global::SharpOrange.API api)
        {
            var __arg0 = ReferenceEquals(api, null) ? global::System.IntPtr.Zero : api.__Instance;
            __Internal.Set_0(__arg0);
        }

        public static global::SharpOrange.API Get()
        {
            var __ret = __Internal.Get_0();
            global::SharpOrange.API __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpOrange.API.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpOrange.API) global::SharpOrange.API.NativeToManagedMap[__ret];
            else __result0 = global::SharpOrange.API.__CreateInstance(__ret);
            return __result0;
        }

        public static global::SharpOrange.API Instance
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("SharpOrange", "?instance@API@@2PEAV1@EA");
                global::SharpOrange.API __result0;
                if (*__ptr == IntPtr.Zero) __result0 = null;
                else if (global::SharpOrange.API.NativeToManagedMap.ContainsKey(*__ptr))
                    __result0 = (global::SharpOrange.API) global::SharpOrange.API.NativeToManagedMap[*__ptr];
                else __result0 = global::SharpOrange.API.__CreateInstance(*__ptr);
                return __result0;
            }

            set
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("SharpOrange", "?instance@API@@2PEAV1@EA");
                *__ptr = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // void LoadClientScript(std::string name, char* buffer, size_t size) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_std_basic_string___Internal_sbytePtr_ulong _LoadClientScript_0DelegateInstance;

        private static void _LoadClientScript_0DelegateHook(global::System.IntPtr instance, global::Std.BasicString.__Internal name, sbyte* buffer, ulong size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API)NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                __target.LoadClientScript(__basicStringRet.CStr(), buffer, size);
            } }

        // void KickPlayer(long playerid, const char * reason) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_int_string _KickPlayer_1DelegateInstance;

        private static void _KickPlayer_1DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string reason)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.KickPlayer(playerid, reason);
        }

        // void KickPlayer(long playerid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_int _KickPlayer_0DelegateInstance;

        private static void _KickPlayer_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.KickPlayer(playerid);
        }

        // bool SetPlayerPosition(long playerid, float x, float y, float z) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float _SetPlayerPosition_0DelegateInstance;

        private static bool _SetPlayerPosition_0DelegateHook(global::System.IntPtr instance, int playerid, float x, float y, float z)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerPosition(playerid, x, y, z);
            return __ret;
        }

        // CVector3 GetPlayerPosition(long playerid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int _GetPlayerPosition_0DelegateInstance;

        private static void _GetPlayerPosition_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerPosition(playerid);
            *(global::SharpOrange.CVector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) __ret.__Instance;
        }

        // bool IsPlayerInRange(long playerid, float x, float y, float z, float range) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float _IsPlayerInRange_0DelegateInstance;

        private static bool _IsPlayerInRange_0DelegateHook(global::System.IntPtr instance, int playerid, float x, float y, float z, float range)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsPlayerInRange(playerid, x, y, z, range);
            return __ret;
        }

        // bool SetPlayerHeading(long playerid, float angle) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float _SetPlayerHeading_0DelegateInstance;

        private static bool _SetPlayerHeading_0DelegateHook(global::System.IntPtr instance, int playerid, float angle)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerHeading(playerid, angle);
            return __ret;
        }

        // float GetPlayerHeading(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_float_IntPtr_int _GetPlayerHeading_0DelegateInstance;

        private static float _GetPlayerHeading_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerHeading(playerid);
            return __ret;
        }

        // bool RemovePlayerWeapons(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int _RemovePlayerWeapons_0DelegateInstance;

        private static bool _RemovePlayerWeapons_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.RemovePlayerWeapons(playerid);
            return __ret;
        }

        // bool GivePlayerWeapon(long playerid, long weapon, long ammo) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int _GivePlayerWeapon_0DelegateInstance;

        private static bool _GivePlayerWeapon_0DelegateHook(global::System.IntPtr instance, int playerid, int weapon, int ammo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GivePlayerWeapon(playerid, weapon, ammo);
            return __ret;
        }

        // bool GivePlayerAmmo(long playerid, long weapon, long ammo) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int _GivePlayerAmmo_0DelegateInstance;

        private static bool _GivePlayerAmmo_0DelegateHook(global::System.IntPtr instance, int playerid, int weapon, int ammo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GivePlayerAmmo(playerid, weapon, ammo);
            return __ret;
        }

        // bool GivePlayerMoney(long playerid, long money) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int _GivePlayerMoney_0DelegateInstance;

        private static bool _GivePlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid, int money)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GivePlayerMoney(playerid, money);
            return __ret;
        }

        // bool SetPlayerMoney(long playerid, long money) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int _SetPlayerMoney_0DelegateInstance;

        private static bool _SetPlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid, int money)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerMoney(playerid, money);
            return __ret;
        }

        // bool ResetPlayerMoney(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int _ResetPlayerMoney_0DelegateInstance;

        private static bool _ResetPlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ResetPlayerMoney(playerid);
            return __ret;
        }

        // size_t GetPlayerMoney(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_ulong_IntPtr_int _GetPlayerMoney_0DelegateInstance;

        private static ulong _GetPlayerMoney_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerMoney(playerid);
            return __ret;
        }

        // bool SetPlayerModel(long playerid, long model) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_int _SetPlayerModel_0DelegateInstance;

        private static bool _SetPlayerModel_0DelegateHook(global::System.IntPtr instance, int playerid, int model)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerModel(playerid, model);
            return __ret;
        }

        // long GetPlayerModel(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_int _GetPlayerModel_0DelegateInstance;

        private static int _GetPlayerModel_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerModel(playerid);
            return __ret;
        }

        // bool SetPlayerName(long playerid, const char * name) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string _SetPlayerName_0DelegateInstance;

        private static bool _SetPlayerName_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string name)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerName(playerid, name);
            return __ret;
        }

        // std::string GetPlayerName(long playerid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int _GetPlayerName_0DelegateInstance;

        private static void _GetPlayerName_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerName(playerid);
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internal*) @return = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
        }

        // bool SetPlayerHealth(long playerid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float _SetPlayerHealth_0DelegateInstance;

        private static bool _SetPlayerHealth_0DelegateHook(global::System.IntPtr instance, int playerid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerHealth(playerid, health);
            return __ret;
        }

        // float GetPlayerHealth(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_float_IntPtr_int _GetPlayerHealth_0DelegateInstance;

        private static float _GetPlayerHealth_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerHealth(playerid);
            return __ret;
        }

        // bool SetPlayerArmour(long playerid, float armour) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float _SetPlayerArmour_0DelegateInstance;

        private static bool _SetPlayerArmour_0DelegateHook(global::System.IntPtr instance, int playerid, float armour)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerArmour(playerid, armour);
            return __ret;
        }

        // float GetPlayerArmour(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_float_IntPtr_int _GetPlayerArmour_0DelegateInstance;

        private static float _GetPlayerArmour_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerArmour(playerid);
            return __ret;
        }

        // bool SetPlayerColor(long playerid, unsigned int color) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint _SetPlayerColor_0DelegateInstance;

        private static bool _SetPlayerColor_0DelegateHook(global::System.IntPtr instance, int playerid, uint color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerColor(playerid, color);
            return __ret;
        }

        // unsigned int GetPlayerColor(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int _GetPlayerColor_0DelegateInstance;

        private static uint _GetPlayerColor_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerColor(playerid);
            return __ret;
        }

        // void BroadcastClientMessage(const char * message, unsigned int color) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_string_uint _BroadcastClientMessage_0DelegateInstance;

        private static void _BroadcastClientMessage_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string message, uint color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.BroadcastClientMessage(message, color);
        }

        // bool SendClientMessage(long playerid, const char * message, unsigned int color) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string_uint _SendClientMessage_0DelegateInstance;

        private static bool _SendClientMessage_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string message, uint color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SendClientMessage(playerid, message, color);
            return __ret;
        }

        // bool SetPlayerIntoVehicle(long playerid, unsigned long vehicle, char seat) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint_sbyte _SetPlayerIntoVehicle_0DelegateInstance;

        private static bool _SetPlayerIntoVehicle_0DelegateHook(global::System.IntPtr instance, int playerid, uint vehicle, sbyte seat)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetPlayerIntoVehicle(playerid, vehicle, seat);
            return __ret;
        }

        // void DisablePlayerHud(long playerid, bool toggle) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_int_bool _DisablePlayerHud_0DelegateInstance;

        private static void _DisablePlayerHud_0DelegateHook(global::System.IntPtr instance, int playerid, bool toggle)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DisablePlayerHud(playerid, toggle);
        }

        // unsigned long GetPlayerGUID(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int _GetPlayerGUID_0DelegateInstance;

        private static uint _GetPlayerGUID_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPlayerGUID(playerid);
            return __ret;
        }

        // void Print(const char * message) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_string _Print_0DelegateInstance;

        private static void _Print_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string message)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Print(message);
        }

        // long Hash(const char * str) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_string _Hash_0DelegateInstance;

        private static int _Hash_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string str)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Hash(str);
            return __ret;
        }

        // unsigned long CreateVehicle(long hash, float x, float y, float z, float heading) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float _CreateVehicle_0DelegateInstance;

        private static uint _CreateVehicle_0DelegateHook(global::System.IntPtr instance, int hash, float x, float y, float z, float heading)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateVehicle(hash, x, y, z, heading);
            return __ret;
        }

        // bool DeleteVehicle(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _DeleteVehicle_0DelegateInstance;

        private static bool _DeleteVehicle_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DeleteVehicle(vehid);
            return __ret;
        }

        // bool SetVehiclePosition(unsigned long vehid, float x, float y, float z) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float _SetVehiclePosition_0DelegateInstance;

        private static bool _SetVehiclePosition_0DelegateHook(global::System.IntPtr instance, uint vehid, float x, float y, float z)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehiclePosition(vehid, x, y, z);
            return __ret;
        }

        // CVector3 GetVehiclePosition(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint _GetVehiclePosition_0DelegateInstance;

        private static void _GetVehiclePosition_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehiclePosition(vehid);
            *(global::SharpOrange.CVector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) __ret.__Instance;
        }

        // bool SetVehicleRotation(unsigned long vehid, float rx, float ry, float rz) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float _SetVehicleRotation_0DelegateInstance;

        private static bool _SetVehicleRotation_0DelegateHook(global::System.IntPtr instance, uint vehid, float rx, float ry, float rz)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleRotation(vehid, rx, ry, rz);
            return __ret;
        }

        // CVector3 GetVehicleRotation(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint _GetVehicleRotation_0DelegateInstance;

        private static void _GetVehicleRotation_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleRotation(vehid);
            *(global::SharpOrange.CVector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::SharpOrange.CVector3.__Internal() : *(global::SharpOrange.CVector3.__Internal*) __ret.__Instance;
        }

        // bool SetVehicleColours(unsigned long vehid, unsigned char Color1, unsigned char Color2) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_byte_byte _SetVehicleColours_0DelegateInstance;

        private static bool _SetVehicleColours_0DelegateHook(global::System.IntPtr instance, uint vehid, byte Color1, byte Color2)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleColours(vehid, Color1, Color2);
            return __ret;
        }

        // bool GetVehicleColours(unsigned long vehid, unsigned char *Color1, unsigned char *Color2) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bytePtr_bytePtr _GetVehicleColours_0DelegateInstance;

        private static bool _GetVehicleColours_0DelegateHook(global::System.IntPtr instance, uint vehid, byte* Color1, byte* Color2)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleColours(vehid, Color1, Color2);
            return __ret;
        }

        // bool SetVehicleTyresBulletproof(unsigned long vehid, bool bulletproof) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool _SetVehicleTyresBulletproof_0DelegateInstance;

        private static bool _SetVehicleTyresBulletproof_0DelegateHook(global::System.IntPtr instance, uint vehid, bool bulletproof)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleTyresBulletproof(vehid, bulletproof);
            return __ret;
        }

        // bool GetVehicleTyresBulletproof(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _GetVehicleTyresBulletproof_0DelegateInstance;

        private static bool _GetVehicleTyresBulletproof_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleTyresBulletproof(vehid);
            return __ret;
        }

        // bool SetVehicleCustomPrimaryColor(unsigned long vehid, int rColor, int gColor, int bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int _SetVehicleCustomPrimaryColor_0DelegateInstance;

        private static bool _SetVehicleCustomPrimaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int rColor, int gColor, int bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleCustomPrimaryColor(vehid, rColor, gColor, bColor);
            return __ret;
        }

        // bool GetVehicleCustomPrimaryColor(unsigned long vehid, int *rColor, int *gColor, int *bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr _GetVehicleCustomPrimaryColor_0DelegateInstance;

        private static bool _GetVehicleCustomPrimaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int* rColor, int* gColor, int* bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleCustomPrimaryColor(vehid, ref *rColor, ref *gColor, ref *bColor);
            return __ret;
        }

        // bool SetVehicleCustomSecondaryColor(unsigned long vehid, int rColor, int gColor, int bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int _SetVehicleCustomSecondaryColor_0DelegateInstance;

        private static bool _SetVehicleCustomSecondaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int rColor, int gColor, int bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleCustomSecondaryColor(vehid, rColor, gColor, bColor);
            return __ret;
        }

        // bool GetVehicleCustomSecondaryColor(unsigned long vehid, int *rColor, int *gColor, int *bColor) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr _GetVehicleCustomSecondaryColor_0DelegateInstance;

        private static bool _GetVehicleCustomSecondaryColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int* rColor, int* gColor, int* bColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleCustomSecondaryColor(vehid, ref *rColor, ref *gColor, ref *bColor);
            return __ret;
        }

        // bool SetVehicleEngineStatus(unsigned long vehid, bool status, bool locked) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool_bool _SetVehicleEngineStatus_0DelegateInstance;

        private static bool _SetVehicleEngineStatus_0DelegateHook(global::System.IntPtr instance, uint vehid, bool status, bool locked)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleEngineStatus(vehid, status, locked);
            return __ret;
        }

        // bool GetVehicleEngineStatus(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _GetVehicleEngineStatus_0DelegateInstance;

        private static bool _GetVehicleEngineStatus_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleEngineStatus(vehid);
            return __ret;
        }

        // bool SetVehicleLocked(unsigned long vehid, bool locked) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool _SetVehicleLocked_0DelegateInstance;

        private static bool _SetVehicleLocked_0DelegateHook(global::System.IntPtr instance, uint vehid, bool locked)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleLocked(vehid, locked);
            return __ret;
        }

        // bool IsVehicleLocked(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _IsVehicleLocked_0DelegateInstance;

        private static bool _IsVehicleLocked_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsVehicleLocked(vehid);
            return __ret;
        }

        // bool SetVehicleBodyHealth(unsigned long vehid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float _SetVehicleBodyHealth_0DelegateInstance;

        private static bool _SetVehicleBodyHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleBodyHealth(vehid, health);
            return __ret;
        }

        // bool SetVehicleEngineHealth(unsigned long vehid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float _SetVehicleEngineHealth_0DelegateInstance;

        private static bool _SetVehicleEngineHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleEngineHealth(vehid, health);
            return __ret;
        }

        // bool SetVehicleTankHealth(unsigned long vehid, float health) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float _SetVehicleTankHealth_0DelegateInstance;

        private static bool _SetVehicleTankHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float health)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleTankHealth(vehid, health);
            return __ret;
        }

        // bool GetVehicleHealth(unsigned long vehid, float *body, float *engine, float *tank) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_floatPtr_floatPtr_floatPtr _GetVehicleHealth_0DelegateInstance;

        private static bool _GetVehicleHealth_0DelegateHook(global::System.IntPtr instance, uint vehid, float* body, float* engine, float* tank)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleHealth(vehid, ref *body, ref *engine, ref *tank);
            return __ret;
        }

        // bool SetVehicleNumberPlate(unsigned long vehid, const char *text) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string _SetVehicleNumberPlate_0DelegateInstance;

        private static bool _SetVehicleNumberPlate_0DelegateHook(global::System.IntPtr instance, uint vehid, [MarshalAs(UnmanagedType.LPStr)] string text)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleNumberPlate(vehid, text);
            return __ret;
        }

        // std::string GetVehicleNumberPlate(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint _GetVehicleNumberPlate_0DelegateInstance;

        private static void _GetVehicleNumberPlate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleNumberPlate(vehid);
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internal*) @return = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
        }

        // bool SetVehicleNumberPlateStyle(unsigned long vehid, int style) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int _SetVehicleNumberPlateStyle_0DelegateInstance;

        private static bool _SetVehicleNumberPlateStyle_0DelegateHook(global::System.IntPtr instance, uint vehid, int style)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleNumberPlateStyle(vehid, style);
            return __ret;
        }

        // int GetVehicleNumberPlateStyle(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleNumberPlateStyle_0DelegateInstance;

        private static int _GetVehicleNumberPlateStyle_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleNumberPlateStyle(vehid);
            return __ret;
        }

        // bool SetVehicleSirenState(unsigned long vehid, bool state) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool _SetVehicleSirenState_0DelegateInstance;

        private static bool _SetVehicleSirenState_0DelegateHook(global::System.IntPtr instance, uint vehid, bool state)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleSirenState(vehid, state);
            return __ret;
        }

        // bool GetVehicleSirenState(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _GetVehicleSirenState_0DelegateInstance;

        private static bool _GetVehicleSirenState_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleSirenState(vehid);
            return __ret;
        }

        // bool SetVehicleWheelColor(unsigned long vehid, int color) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int _SetVehicleWheelColor_0DelegateInstance;

        private static bool _SetVehicleWheelColor_0DelegateHook(global::System.IntPtr instance, uint vehid, int color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleWheelColor(vehid, color);
            return __ret;
        }

        // int GetVehicleWheelColor(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleWheelColor_0DelegateInstance;

        private static int _GetVehicleWheelColor_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleWheelColor(vehid);
            return __ret;
        }

        // bool SetVehicleWheelType(unsigned long vehid, int type) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int _SetVehicleWheelType_0DelegateInstance;

        private static bool _SetVehicleWheelType_0DelegateHook(global::System.IntPtr instance, uint vehid, int type)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetVehicleWheelType(vehid, type);
            return __ret;
        }

        // int GetVehicleWheelType(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleWheelType_0DelegateInstance;

        private static int _GetVehicleWheelType_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleWheelType(vehid);
            return __ret;
        }

        // int GetVehicleDriver(unsigned long vehid) = 0
        private static global::SharpOrange.Delegates.Func_int_IntPtr_uint _GetVehicleDriver_0DelegateInstance;

        private static int _GetVehicleDriver_0DelegateHook(global::System.IntPtr instance, uint vehid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetVehicleDriver(vehid);
            return __ret;
        }

        // unsigned long CreateObject(long model, float x, float y, float z, float pitch, float yaw, float roll) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float_float _CreateObject_0DelegateInstance;

        private static uint _CreateObject_0DelegateHook(global::System.IntPtr instance, int model, float x, float y, float z, float pitch, float yaw, float roll)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateObject(model, x, y, z, pitch, yaw, roll);
            return __ret;
        }

        // bool DeleteObject(unsigned long guid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _DeleteObject_0DelegateInstance;

        private static bool _DeleteObject_0DelegateHook(global::System.IntPtr instance, uint guid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DeleteObject(guid);
            return __ret;
        }

        // bool CreatePickup(int type, float x, float y, float z, float scale) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float _CreatePickup_0DelegateInstance;

        private static bool _CreatePickup_0DelegateHook(global::System.IntPtr instance, int type, float x, float y, float z, float scale)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreatePickup(type, x, y, z, scale);
            return __ret;
        }

        // unsigned long CreateBlipForAll(std::string name, float x, float y, float z, float scale, int color, int sprite) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_std_basic_string___Internal_float_float_float_float_int_int _CreateBlipForAll_0DelegateInstance;

        private static uint _CreateBlipForAll_0DelegateHook(global::System.IntPtr instance, global::Std.BasicString.__Internal name, float x, float y, float z, float scale, int color, int sprite)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API)NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                var __ret = __target.CreateBlipForAll(__basicStringRet.CStr(), x, y, z, scale, color, sprite);
                return __ret;
            } }

        // unsigned long CreateBlipForPlayer(long playerid, std::string name, float x, float y, float z, float scale, int color, int sprite) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_std_basic_string___Internal_float_float_float_float_int_int _CreateBlipForPlayer_0DelegateInstance;

        private static uint _CreateBlipForPlayer_0DelegateHook(global::System.IntPtr instance, int playerid, global::Std.BasicString.__Internal name, float x, float y, float z, float scale, int color, int sprite)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API)NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                var __ret = __target.CreateBlipForPlayer(playerid, __basicStringRet.CStr(), x, y, z, scale, color, sprite);
                return __ret;
            } }

        // void DeleteBlip(unsigned long guid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint _DeleteBlip_0DelegateInstance;

        private static void _DeleteBlip_0DelegateHook(global::System.IntPtr instance, uint guid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteBlip(guid);
        }

        // void SetBlipColor(unsigned long guid, int color) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_int _SetBlipColor_0DelegateInstance;

        private static void _SetBlipColor_0DelegateHook(global::System.IntPtr instance, uint guid, int color)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipColor(guid, color);
        }

        // void SetBlipScale(unsigned long guid, float scale) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_float _SetBlipScale_0DelegateInstance;

        private static void _SetBlipScale_0DelegateHook(global::System.IntPtr instance, uint guid, float scale)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipScale(guid, scale);
        }

        // void SetBlipRoute(unsigned long guid, bool route) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_bool _SetBlipRoute_0DelegateInstance;

        private static void _SetBlipRoute_0DelegateHook(global::System.IntPtr instance, uint guid, bool route)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipRoute(guid, route);
        }

        // void SetBlipSprite(unsigned long guid, int sprite) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_int _SetBlipSprite_0DelegateInstance;

        private static void _SetBlipSprite_0DelegateHook(global::System.IntPtr instance, uint guid, int sprite)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipSprite(guid, sprite);
        }

        // void SetBlipName(unsigned long guid, std::string name) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_std_basic_string___Internal _SetBlipName_0DelegateInstance;

        private static void _SetBlipName_0DelegateHook(global::System.IntPtr instance, uint guid, global::Std.BasicString.__Internal name)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API)NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(name))
            {
                __target.SetBlipName(guid, __basicStringRet.CStr());
            }
        }

        // void SetBlipAsShortRange(unsigned long guid, bool _short) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_bool _SetBlipAsShortRange_0DelegateInstance;

        private static void _SetBlipAsShortRange_0DelegateHook(global::System.IntPtr instance, uint guid, bool _short)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetBlipAsShortRange(guid, _short);
        }

        // void AttachBlipToPlayer(unsigned long _guid, long player) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_int _AttachBlipToPlayer_0DelegateInstance;

        private static void _AttachBlipToPlayer_0DelegateHook(global::System.IntPtr instance, uint _guid, int player)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AttachBlipToPlayer(_guid, player);
        }

        // void AttachBlipToVehicle(unsigned long _guid, unsigned long vehicle) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint_uint _AttachBlipToVehicle_0DelegateInstance;

        private static void _AttachBlipToVehicle_0DelegateHook(global::System.IntPtr instance, uint _guid, uint vehicle)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AttachBlipToVehicle(_guid, vehicle);
        }

        // unsigned long CreateMarkerForAll(float x, float y, float z, float height, float radius) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_float_float_float_float_float _CreateMarkerForAll_0DelegateInstance;

        private static uint _CreateMarkerForAll_0DelegateHook(global::System.IntPtr instance, float x, float y, float z, float height, float radius)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateMarkerForAll(x, y, z, height, radius);
            return __ret;
        }

        // unsigned long CreateMarkerForPlayer(long playerid, float x, float y, float z, float height, float radius) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float _CreateMarkerForPlayer_0DelegateInstance;

        private static uint _CreateMarkerForPlayer_0DelegateHook(global::System.IntPtr instance, int playerid, float x, float y, float z, float height, float radius)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateMarkerForPlayer(playerid, x, y, z, height, radius);
            return __ret;
        }

        // void DeleteMarker(unsigned long guid) = 0
        private static global::SharpOrange.Delegates.Action_IntPtr_uint _DeleteMarker_0DelegateInstance;

        private static void _DeleteMarker_0DelegateHook(global::System.IntPtr instance, uint guid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteMarker(guid);
        }

        // bool SendNotification(long playerid, const char * msg) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string _SendNotification_0DelegateInstance;

        private static bool _SendNotification_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SendNotification(playerid, msg);
            return __ret;
        }

        // bool SetInfoMsg(long playerid, const char * msg) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int_string _SetInfoMsg_0DelegateInstance;

        private static bool _SetInfoMsg_0DelegateHook(global::System.IntPtr instance, int playerid, [MarshalAs(UnmanagedType.LPStr)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SetInfoMsg(playerid, msg);
            return __ret;
        }

        // bool UnsetInfoMsg(long playerid) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_int _UnsetInfoMsg_0DelegateInstance;

        private static bool _UnsetInfoMsg_0DelegateHook(global::System.IntPtr instance, int playerid)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.UnsetInfoMsg(playerid);
            return __ret;
        }

        // unsigned long Create3DText(const char * text, float x, float y, float z, int color, int outColor, float fontSize) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_string_float_float_float_int_int_float _Create3DText_0DelegateInstance;

        private static uint _Create3DText_0DelegateHook(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string text, float x, float y, float z, int color, int outColor, float fontSize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Create3DText(text, x, y, z, color, outColor, fontSize);
            return __ret;
        }

        // unsigned long Create3DTextForPlayer(unsigned long player, const char * text, float x, float y, float z, int color, int outColor) = 0
        private static global::SharpOrange.Delegates.Func_uint_IntPtr_uint_string_float_float_float_int_int _Create3DTextForPlayer_0DelegateInstance;

        private static uint _Create3DTextForPlayer_0DelegateHook(global::System.IntPtr instance, uint player, [MarshalAs(UnmanagedType.LPStr)] string text, float x, float y, float z, int color, int outColor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Create3DTextForPlayer(player, text, x, y, z, color, outColor);
            return __ret;
        }

        // bool Attach3DTextToVehicle(unsigned long textId, unsigned long vehicle, float oX, float oY, float oZ) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float _Attach3DTextToVehicle_0DelegateInstance;

        private static bool _Attach3DTextToVehicle_0DelegateHook(global::System.IntPtr instance, uint textId, uint vehicle, float oX, float oY, float oZ)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Attach3DTextToVehicle(textId, vehicle, oX, oY, oZ);
            return __ret;
        }

        // bool Attach3DTextToPlayer(unsigned long textId, unsigned long player, float oX, float oY, float oZ) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float _Attach3DTextToPlayer_0DelegateInstance;

        private static bool _Attach3DTextToPlayer_0DelegateHook(global::System.IntPtr instance, uint textId, uint player, float oX, float oY, float oZ)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Attach3DTextToPlayer(textId, player, oX, oY, oZ);
            return __ret;
        }

        // bool Set3DTextContent(unsigned long textId, const char * text) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string _Set3DTextContent_0DelegateInstance;

        private static bool _Set3DTextContent_0DelegateHook(global::System.IntPtr instance, uint textId, [MarshalAs(UnmanagedType.LPStr)] string text)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Set3DTextContent(textId, text);
            return __ret;
        }

        // bool Delete3DText(unsigned long textId) = 0
        private static global::SharpOrange.Delegates.Func_bool_IntPtr_uint _Delete3DText_0DelegateInstance;

        private static bool _Delete3DText_0DelegateHook(global::System.IntPtr instance, uint textId)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::SharpOrange.API) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Delete3DText(textId);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[91];
                _LoadClientScript_0DelegateInstance += _LoadClientScript_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_LoadClientScript_0DelegateInstance).ToPointer();
                _KickPlayer_1DelegateInstance += _KickPlayer_1DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_KickPlayer_1DelegateInstance).ToPointer();
                _KickPlayer_0DelegateInstance += _KickPlayer_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_KickPlayer_0DelegateInstance).ToPointer();
                _SetPlayerPosition_0DelegateInstance += _SetPlayerPosition_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetPlayerPosition_0DelegateInstance).ToPointer();
                _GetPlayerPosition_0DelegateInstance += _GetPlayerPosition_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetPlayerPosition_0DelegateInstance).ToPointer();
                _IsPlayerInRange_0DelegateInstance += _IsPlayerInRange_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_IsPlayerInRange_0DelegateInstance).ToPointer();
                _SetPlayerHeading_0DelegateInstance += _SetPlayerHeading_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_SetPlayerHeading_0DelegateInstance).ToPointer();
                _GetPlayerHeading_0DelegateInstance += _GetPlayerHeading_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetPlayerHeading_0DelegateInstance).ToPointer();
                _RemovePlayerWeapons_0DelegateInstance += _RemovePlayerWeapons_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_RemovePlayerWeapons_0DelegateInstance).ToPointer();
                _GivePlayerWeapon_0DelegateInstance += _GivePlayerWeapon_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GivePlayerWeapon_0DelegateInstance).ToPointer();
                _GivePlayerAmmo_0DelegateInstance += _GivePlayerAmmo_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GivePlayerAmmo_0DelegateInstance).ToPointer();
                _GivePlayerMoney_0DelegateInstance += _GivePlayerMoney_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_GivePlayerMoney_0DelegateInstance).ToPointer();
                _SetPlayerMoney_0DelegateInstance += _SetPlayerMoney_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_SetPlayerMoney_0DelegateInstance).ToPointer();
                _ResetPlayerMoney_0DelegateInstance += _ResetPlayerMoney_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ResetPlayerMoney_0DelegateInstance).ToPointer();
                _GetPlayerMoney_0DelegateInstance += _GetPlayerMoney_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetPlayerMoney_0DelegateInstance).ToPointer();
                _SetPlayerModel_0DelegateInstance += _SetPlayerModel_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_SetPlayerModel_0DelegateInstance).ToPointer();
                _GetPlayerModel_0DelegateInstance += _GetPlayerModel_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_GetPlayerModel_0DelegateInstance).ToPointer();
                _SetPlayerName_0DelegateInstance += _SetPlayerName_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_SetPlayerName_0DelegateInstance).ToPointer();
                _GetPlayerName_0DelegateInstance += _GetPlayerName_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_GetPlayerName_0DelegateInstance).ToPointer();
                _SetPlayerHealth_0DelegateInstance += _SetPlayerHealth_0DelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_SetPlayerHealth_0DelegateInstance).ToPointer();
                _GetPlayerHealth_0DelegateInstance += _GetPlayerHealth_0DelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetPlayerHealth_0DelegateInstance).ToPointer();
                _SetPlayerArmour_0DelegateInstance += _SetPlayerArmour_0DelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_SetPlayerArmour_0DelegateInstance).ToPointer();
                _GetPlayerArmour_0DelegateInstance += _GetPlayerArmour_0DelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_GetPlayerArmour_0DelegateInstance).ToPointer();
                _SetPlayerColor_0DelegateInstance += _SetPlayerColor_0DelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_SetPlayerColor_0DelegateInstance).ToPointer();
                _GetPlayerColor_0DelegateInstance += _GetPlayerColor_0DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_GetPlayerColor_0DelegateInstance).ToPointer();
                _BroadcastClientMessage_0DelegateInstance += _BroadcastClientMessage_0DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_BroadcastClientMessage_0DelegateInstance).ToPointer();
                _SendClientMessage_0DelegateInstance += _SendClientMessage_0DelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_SendClientMessage_0DelegateInstance).ToPointer();
                _SetPlayerIntoVehicle_0DelegateInstance += _SetPlayerIntoVehicle_0DelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_SetPlayerIntoVehicle_0DelegateInstance).ToPointer();
                _DisablePlayerHud_0DelegateInstance += _DisablePlayerHud_0DelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_DisablePlayerHud_0DelegateInstance).ToPointer();
                _GetPlayerGUID_0DelegateInstance += _GetPlayerGUID_0DelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_GetPlayerGUID_0DelegateInstance).ToPointer();
                _Print_0DelegateInstance += _Print_0DelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_Print_0DelegateInstance).ToPointer();
                _Hash_0DelegateInstance += _Hash_0DelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_Hash_0DelegateInstance).ToPointer();
                _CreateVehicle_0DelegateInstance += _CreateVehicle_0DelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_CreateVehicle_0DelegateInstance).ToPointer();
                _DeleteVehicle_0DelegateInstance += _DeleteVehicle_0DelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_DeleteVehicle_0DelegateInstance).ToPointer();
                _SetVehiclePosition_0DelegateInstance += _SetVehiclePosition_0DelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_SetVehiclePosition_0DelegateInstance).ToPointer();
                _GetVehiclePosition_0DelegateInstance += _GetVehiclePosition_0DelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_GetVehiclePosition_0DelegateInstance).ToPointer();
                _SetVehicleRotation_0DelegateInstance += _SetVehicleRotation_0DelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_SetVehicleRotation_0DelegateInstance).ToPointer();
                _GetVehicleRotation_0DelegateInstance += _GetVehicleRotation_0DelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_GetVehicleRotation_0DelegateInstance).ToPointer();
                _SetVehicleColours_0DelegateInstance += _SetVehicleColours_0DelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_SetVehicleColours_0DelegateInstance).ToPointer();
                _GetVehicleColours_0DelegateInstance += _GetVehicleColours_0DelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_GetVehicleColours_0DelegateInstance).ToPointer();
                _SetVehicleTyresBulletproof_0DelegateInstance += _SetVehicleTyresBulletproof_0DelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_SetVehicleTyresBulletproof_0DelegateInstance).ToPointer();
                _GetVehicleTyresBulletproof_0DelegateInstance += _GetVehicleTyresBulletproof_0DelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_GetVehicleTyresBulletproof_0DelegateInstance).ToPointer();
                _SetVehicleCustomPrimaryColor_0DelegateInstance += _SetVehicleCustomPrimaryColor_0DelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_SetVehicleCustomPrimaryColor_0DelegateInstance).ToPointer();
                _GetVehicleCustomPrimaryColor_0DelegateInstance += _GetVehicleCustomPrimaryColor_0DelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_GetVehicleCustomPrimaryColor_0DelegateInstance).ToPointer();
                _SetVehicleCustomSecondaryColor_0DelegateInstance += _SetVehicleCustomSecondaryColor_0DelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_SetVehicleCustomSecondaryColor_0DelegateInstance).ToPointer();
                _GetVehicleCustomSecondaryColor_0DelegateInstance += _GetVehicleCustomSecondaryColor_0DelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_GetVehicleCustomSecondaryColor_0DelegateInstance).ToPointer();
                _SetVehicleEngineStatus_0DelegateInstance += _SetVehicleEngineStatus_0DelegateHook;
                _Thunks[46] = Marshal.GetFunctionPointerForDelegate(_SetVehicleEngineStatus_0DelegateInstance).ToPointer();
                _GetVehicleEngineStatus_0DelegateInstance += _GetVehicleEngineStatus_0DelegateHook;
                _Thunks[47] = Marshal.GetFunctionPointerForDelegate(_GetVehicleEngineStatus_0DelegateInstance).ToPointer();
                _SetVehicleLocked_0DelegateInstance += _SetVehicleLocked_0DelegateHook;
                _Thunks[48] = Marshal.GetFunctionPointerForDelegate(_SetVehicleLocked_0DelegateInstance).ToPointer();
                _IsVehicleLocked_0DelegateInstance += _IsVehicleLocked_0DelegateHook;
                _Thunks[49] = Marshal.GetFunctionPointerForDelegate(_IsVehicleLocked_0DelegateInstance).ToPointer();
                _SetVehicleBodyHealth_0DelegateInstance += _SetVehicleBodyHealth_0DelegateHook;
                _Thunks[50] = Marshal.GetFunctionPointerForDelegate(_SetVehicleBodyHealth_0DelegateInstance).ToPointer();
                _SetVehicleEngineHealth_0DelegateInstance += _SetVehicleEngineHealth_0DelegateHook;
                _Thunks[51] = Marshal.GetFunctionPointerForDelegate(_SetVehicleEngineHealth_0DelegateInstance).ToPointer();
                _SetVehicleTankHealth_0DelegateInstance += _SetVehicleTankHealth_0DelegateHook;
                _Thunks[52] = Marshal.GetFunctionPointerForDelegate(_SetVehicleTankHealth_0DelegateInstance).ToPointer();
                _GetVehicleHealth_0DelegateInstance += _GetVehicleHealth_0DelegateHook;
                _Thunks[53] = Marshal.GetFunctionPointerForDelegate(_GetVehicleHealth_0DelegateInstance).ToPointer();
                _SetVehicleNumberPlate_0DelegateInstance += _SetVehicleNumberPlate_0DelegateHook;
                _Thunks[54] = Marshal.GetFunctionPointerForDelegate(_SetVehicleNumberPlate_0DelegateInstance).ToPointer();
                _GetVehicleNumberPlate_0DelegateInstance += _GetVehicleNumberPlate_0DelegateHook;
                _Thunks[55] = Marshal.GetFunctionPointerForDelegate(_GetVehicleNumberPlate_0DelegateInstance).ToPointer();
                _SetVehicleNumberPlateStyle_0DelegateInstance += _SetVehicleNumberPlateStyle_0DelegateHook;
                _Thunks[56] = Marshal.GetFunctionPointerForDelegate(_SetVehicleNumberPlateStyle_0DelegateInstance).ToPointer();
                _GetVehicleNumberPlateStyle_0DelegateInstance += _GetVehicleNumberPlateStyle_0DelegateHook;
                _Thunks[57] = Marshal.GetFunctionPointerForDelegate(_GetVehicleNumberPlateStyle_0DelegateInstance).ToPointer();
                _SetVehicleSirenState_0DelegateInstance += _SetVehicleSirenState_0DelegateHook;
                _Thunks[58] = Marshal.GetFunctionPointerForDelegate(_SetVehicleSirenState_0DelegateInstance).ToPointer();
                _GetVehicleSirenState_0DelegateInstance += _GetVehicleSirenState_0DelegateHook;
                _Thunks[59] = Marshal.GetFunctionPointerForDelegate(_GetVehicleSirenState_0DelegateInstance).ToPointer();
                _SetVehicleWheelColor_0DelegateInstance += _SetVehicleWheelColor_0DelegateHook;
                _Thunks[60] = Marshal.GetFunctionPointerForDelegate(_SetVehicleWheelColor_0DelegateInstance).ToPointer();
                _GetVehicleWheelColor_0DelegateInstance += _GetVehicleWheelColor_0DelegateHook;
                _Thunks[61] = Marshal.GetFunctionPointerForDelegate(_GetVehicleWheelColor_0DelegateInstance).ToPointer();
                _SetVehicleWheelType_0DelegateInstance += _SetVehicleWheelType_0DelegateHook;
                _Thunks[62] = Marshal.GetFunctionPointerForDelegate(_SetVehicleWheelType_0DelegateInstance).ToPointer();
                _GetVehicleWheelType_0DelegateInstance += _GetVehicleWheelType_0DelegateHook;
                _Thunks[63] = Marshal.GetFunctionPointerForDelegate(_GetVehicleWheelType_0DelegateInstance).ToPointer();
                _GetVehicleDriver_0DelegateInstance += _GetVehicleDriver_0DelegateHook;
                _Thunks[64] = Marshal.GetFunctionPointerForDelegate(_GetVehicleDriver_0DelegateInstance).ToPointer();
                _CreateObject_0DelegateInstance += _CreateObject_0DelegateHook;
                _Thunks[65] = Marshal.GetFunctionPointerForDelegate(_CreateObject_0DelegateInstance).ToPointer();
                _DeleteObject_0DelegateInstance += _DeleteObject_0DelegateHook;
                _Thunks[66] = Marshal.GetFunctionPointerForDelegate(_DeleteObject_0DelegateInstance).ToPointer();
                _CreatePickup_0DelegateInstance += _CreatePickup_0DelegateHook;
                _Thunks[67] = Marshal.GetFunctionPointerForDelegate(_CreatePickup_0DelegateInstance).ToPointer();
                _CreateBlipForAll_0DelegateInstance += _CreateBlipForAll_0DelegateHook;
                _Thunks[68] = Marshal.GetFunctionPointerForDelegate(_CreateBlipForAll_0DelegateInstance).ToPointer();
                _CreateBlipForPlayer_0DelegateInstance += _CreateBlipForPlayer_0DelegateHook;
                _Thunks[69] = Marshal.GetFunctionPointerForDelegate(_CreateBlipForPlayer_0DelegateInstance).ToPointer();
                _DeleteBlip_0DelegateInstance += _DeleteBlip_0DelegateHook;
                _Thunks[70] = Marshal.GetFunctionPointerForDelegate(_DeleteBlip_0DelegateInstance).ToPointer();
                _SetBlipColor_0DelegateInstance += _SetBlipColor_0DelegateHook;
                _Thunks[71] = Marshal.GetFunctionPointerForDelegate(_SetBlipColor_0DelegateInstance).ToPointer();
                _SetBlipScale_0DelegateInstance += _SetBlipScale_0DelegateHook;
                _Thunks[72] = Marshal.GetFunctionPointerForDelegate(_SetBlipScale_0DelegateInstance).ToPointer();
                _SetBlipRoute_0DelegateInstance += _SetBlipRoute_0DelegateHook;
                _Thunks[73] = Marshal.GetFunctionPointerForDelegate(_SetBlipRoute_0DelegateInstance).ToPointer();
                _SetBlipSprite_0DelegateInstance += _SetBlipSprite_0DelegateHook;
                _Thunks[74] = Marshal.GetFunctionPointerForDelegate(_SetBlipSprite_0DelegateInstance).ToPointer();
                _SetBlipName_0DelegateInstance += _SetBlipName_0DelegateHook;
                _Thunks[75] = Marshal.GetFunctionPointerForDelegate(_SetBlipName_0DelegateInstance).ToPointer();
                _SetBlipAsShortRange_0DelegateInstance += _SetBlipAsShortRange_0DelegateHook;
                _Thunks[76] = Marshal.GetFunctionPointerForDelegate(_SetBlipAsShortRange_0DelegateInstance).ToPointer();
                _AttachBlipToPlayer_0DelegateInstance += _AttachBlipToPlayer_0DelegateHook;
                _Thunks[77] = Marshal.GetFunctionPointerForDelegate(_AttachBlipToPlayer_0DelegateInstance).ToPointer();
                _AttachBlipToVehicle_0DelegateInstance += _AttachBlipToVehicle_0DelegateHook;
                _Thunks[78] = Marshal.GetFunctionPointerForDelegate(_AttachBlipToVehicle_0DelegateInstance).ToPointer();
                _CreateMarkerForAll_0DelegateInstance += _CreateMarkerForAll_0DelegateHook;
                _Thunks[79] = Marshal.GetFunctionPointerForDelegate(_CreateMarkerForAll_0DelegateInstance).ToPointer();
                _CreateMarkerForPlayer_0DelegateInstance += _CreateMarkerForPlayer_0DelegateHook;
                _Thunks[80] = Marshal.GetFunctionPointerForDelegate(_CreateMarkerForPlayer_0DelegateInstance).ToPointer();
                _DeleteMarker_0DelegateInstance += _DeleteMarker_0DelegateHook;
                _Thunks[81] = Marshal.GetFunctionPointerForDelegate(_DeleteMarker_0DelegateInstance).ToPointer();
                _SendNotification_0DelegateInstance += _SendNotification_0DelegateHook;
                _Thunks[82] = Marshal.GetFunctionPointerForDelegate(_SendNotification_0DelegateInstance).ToPointer();
                _SetInfoMsg_0DelegateInstance += _SetInfoMsg_0DelegateHook;
                _Thunks[83] = Marshal.GetFunctionPointerForDelegate(_SetInfoMsg_0DelegateInstance).ToPointer();
                _UnsetInfoMsg_0DelegateInstance += _UnsetInfoMsg_0DelegateHook;
                _Thunks[84] = Marshal.GetFunctionPointerForDelegate(_UnsetInfoMsg_0DelegateInstance).ToPointer();
                _Create3DText_0DelegateInstance += _Create3DText_0DelegateHook;
                _Thunks[85] = Marshal.GetFunctionPointerForDelegate(_Create3DText_0DelegateInstance).ToPointer();
                _Create3DTextForPlayer_0DelegateInstance += _Create3DTextForPlayer_0DelegateHook;
                _Thunks[86] = Marshal.GetFunctionPointerForDelegate(_Create3DTextForPlayer_0DelegateInstance).ToPointer();
                _Attach3DTextToVehicle_0DelegateInstance += _Attach3DTextToVehicle_0DelegateHook;
                _Thunks[87] = Marshal.GetFunctionPointerForDelegate(_Attach3DTextToVehicle_0DelegateInstance).ToPointer();
                _Attach3DTextToPlayer_0DelegateInstance += _Attach3DTextToPlayer_0DelegateHook;
                _Thunks[88] = Marshal.GetFunctionPointerForDelegate(_Attach3DTextToPlayer_0DelegateInstance).ToPointer();
                _Set3DTextContent_0DelegateInstance += _Set3DTextContent_0DelegateHook;
                _Thunks[89] = Marshal.GetFunctionPointerForDelegate(_Set3DTextContent_0DelegateInstance).ToPointer();
                _Delete3DText_0DelegateInstance += _Delete3DText_0DelegateHook;
                _Thunks[90] = Marshal.GetFunctionPointerForDelegate(_Delete3DText_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(94 * 8);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                *(void**) (vfptr0 + 24) = _Thunks[1];
                *(void**) (vfptr0 + 32) = _Thunks[2];
                *(void**) (vfptr0 + 40) = _Thunks[3];
                *(void**) (vfptr0 + 48) = _Thunks[4];
                *(void**) (vfptr0 + 56) = _Thunks[5];
                *(void**) (vfptr0 + 64) = _Thunks[6];
                *(void**) (vfptr0 + 72) = _Thunks[7];
                *(void**) (vfptr0 + 80) = _Thunks[8];
                *(void**) (vfptr0 + 88) = _Thunks[9];
                *(void**) (vfptr0 + 96) = _Thunks[10];
                *(void**) (vfptr0 + 104) = _Thunks[11];
                *(void**) (vfptr0 + 112) = _Thunks[12];
                *(void**) (vfptr0 + 120) = _Thunks[13];
                *(void**) (vfptr0 + 128) = _Thunks[14];
                *(void**) (vfptr0 + 136) = _Thunks[15];
                *(void**) (vfptr0 + 144) = _Thunks[16];
                *(void**) (vfptr0 + 152) = _Thunks[17];
                *(void**) (vfptr0 + 160) = _Thunks[18];
                *(void**) (vfptr0 + 168) = _Thunks[19];
                *(void**) (vfptr0 + 176) = _Thunks[20];
                *(void**) (vfptr0 + 184) = _Thunks[21];
                *(void**) (vfptr0 + 192) = _Thunks[22];
                *(void**) (vfptr0 + 200) = _Thunks[23];
                *(void**) (vfptr0 + 208) = _Thunks[24];
                *(void**) (vfptr0 + 216) = _Thunks[25];
                *(void**) (vfptr0 + 224) = _Thunks[26];
                *(void**) (vfptr0 + 232) = _Thunks[27];
                *(void**) (vfptr0 + 240) = _Thunks[28];
                *(void**) (vfptr0 + 248) = _Thunks[29];
                *(void**) (vfptr0 + 256) = _Thunks[30];
                *(void**) (vfptr0 + 264) = _Thunks[31];
                *(void**) (vfptr0 + 272) = _Thunks[32];
                *(void**) (vfptr0 + 280) = _Thunks[33];
                *(void**) (vfptr0 + 288) = _Thunks[34];
                *(void**) (vfptr0 + 296) = _Thunks[35];
                *(void**) (vfptr0 + 304) = _Thunks[36];
                *(void**) (vfptr0 + 312) = _Thunks[37];
                *(void**) (vfptr0 + 320) = _Thunks[38];
                *(void**) (vfptr0 + 328) = _Thunks[39];
                *(void**) (vfptr0 + 336) = _Thunks[40];
                *(void**) (vfptr0 + 344) = _Thunks[41];
                *(void**) (vfptr0 + 352) = _Thunks[42];
                *(void**) (vfptr0 + 360) = _Thunks[43];
                *(void**) (vfptr0 + 368) = _Thunks[44];
                *(void**) (vfptr0 + 376) = _Thunks[45];
                *(void**) (vfptr0 + 384) = _Thunks[46];
                *(void**) (vfptr0 + 392) = _Thunks[47];
                *(void**) (vfptr0 + 400) = _Thunks[48];
                *(void**) (vfptr0 + 408) = _Thunks[49];
                *(void**) (vfptr0 + 416) = _Thunks[50];
                *(void**) (vfptr0 + 424) = _Thunks[51];
                *(void**) (vfptr0 + 432) = _Thunks[52];
                *(void**) (vfptr0 + 440) = _Thunks[53];
                *(void**) (vfptr0 + 448) = _Thunks[54];
                *(void**) (vfptr0 + 456) = _Thunks[55];
                *(void**) (vfptr0 + 464) = _Thunks[56];
                *(void**) (vfptr0 + 472) = _Thunks[57];
                *(void**) (vfptr0 + 480) = _Thunks[58];
                *(void**) (vfptr0 + 488) = _Thunks[59];
                *(void**) (vfptr0 + 496) = _Thunks[60];
                *(void**) (vfptr0 + 504) = _Thunks[61];
                *(void**) (vfptr0 + 512) = _Thunks[62];
                *(void**) (vfptr0 + 520) = _Thunks[63];
                *(void**) (vfptr0 + 528) = _Thunks[64];
                *(void**) (vfptr0 + 536) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 536);
                *(void**) (vfptr0 + 544) = _Thunks[65];
                *(void**) (vfptr0 + 552) = _Thunks[66];
                *(void**) (vfptr0 + 560) = _Thunks[67];
                *(void**) (vfptr0 + 568) = _Thunks[68];
                *(void**) (vfptr0 + 576) = _Thunks[69];
                *(void**) (vfptr0 + 584) = _Thunks[70];
                *(void**) (vfptr0 + 592) = _Thunks[71];
                *(void**) (vfptr0 + 600) = _Thunks[72];
                *(void**) (vfptr0 + 608) = _Thunks[73];
                *(void**) (vfptr0 + 616) = _Thunks[74];
                *(void**) (vfptr0 + 624) = _Thunks[75];
                *(void**) (vfptr0 + 632) = _Thunks[76];
                *(void**) (vfptr0 + 640) = _Thunks[77];
                *(void**) (vfptr0 + 648) = _Thunks[78];
                *(void**) (vfptr0 + 656) = _Thunks[79];
                *(void**) (vfptr0 + 664) = _Thunks[80];
                *(void**) (vfptr0 + 672) = _Thunks[81];
                *(void**) (vfptr0 + 680) = _Thunks[82];
                *(void**) (vfptr0 + 688) = _Thunks[83];
                *(void**) (vfptr0 + 696) = _Thunks[84];
                *(void**) (vfptr0 + 704) = _Thunks[85];
                *(void**) (vfptr0 + 712) = _Thunks[86];
                *(void**) (vfptr0 + 720) = _Thunks[87];
                *(void**) (vfptr0 + 728) = _Thunks[88];
                *(void**) (vfptr0 + 736) = _Thunks[89];
                *(void**) (vfptr0 + 744) = _Thunks[90];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe partial class APIBaseInternal : global::SharpOrange.APIBase, IDisposable
    {
        private static void* __CopyValue(global::SharpOrange.APIBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpOrange.APIBase.__Internal));
            *(global::SharpOrange.APIBase.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal APIBaseInternal(global::SharpOrange.APIBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal APIBaseInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override void LoadClientScript(string name, sbyte* buffer, ulong size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 8);
            var ___LoadClientScript_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_std_basic_string___Internal_sbytePtr_ulong) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_std_basic_string___Internal_sbytePtr_ulong));
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(name, __allocator0);
            var __arg0 = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
            ___LoadClientScript_0Delegate((__Instance + __PointerAdjustment), __arg0, buffer, size);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
        }

        public override void KickPlayer(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 8);
            var ___KickPlayer_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_int));
            ___KickPlayer_0Delegate((__Instance + __PointerAdjustment), playerid);
        }

        public override void KickPlayer(int playerid, string reason)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 8);
            var ___KickPlayer_1Delegate = (global::SharpOrange.Delegates.Action_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_int_string));
            ___KickPlayer_1Delegate((__Instance + __PointerAdjustment), playerid, reason);
        }

        public override bool SetPlayerPosition(int playerid, float x, float y, float z)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 8);
            var ___SetPlayerPosition_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float));
            var __ret = ___SetPlayerPosition_0Delegate((__Instance + __PointerAdjustment), playerid, x, y, z);
            return __ret;
        }

        public override global::SharpOrange.CVector3 GetPlayerPosition(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 8);
            var ___GetPlayerPosition_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int));
            var __ret = new global::SharpOrange.CVector3.__Internal();
            ___GetPlayerPosition_0Delegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), playerid);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public override bool IsPlayerInRange(int playerid, float x, float y, float z, float range)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 8);
            var ___IsPlayerInRange_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float));
            var __ret = ___IsPlayerInRange_0Delegate((__Instance + __PointerAdjustment), playerid, x, y, z, range);
            return __ret;
        }

        public override bool SetPlayerHeading(int playerid, float angle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 8);
            var ___SetPlayerHeading_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float));
            var __ret = ___SetPlayerHeading_0Delegate((__Instance + __PointerAdjustment), playerid, angle);
            return __ret;
        }

        public override float GetPlayerHeading(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 8);
            var ___GetPlayerHeading_0Delegate = (global::SharpOrange.Delegates.Func_float_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_float_IntPtr_int));
            var __ret = ___GetPlayerHeading_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override bool RemovePlayerWeapons(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 8);
            var ___RemovePlayerWeapons_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int));
            var __ret = ___RemovePlayerWeapons_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override bool GivePlayerWeapon(int playerid, int weapon, int ammo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 8);
            var ___GivePlayerWeapon_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___GivePlayerWeapon_0Delegate((__Instance + __PointerAdjustment), playerid, weapon, ammo);
            return __ret;
        }

        public override bool GivePlayerAmmo(int playerid, int weapon, int ammo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 8);
            var ___GivePlayerAmmo_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___GivePlayerAmmo_0Delegate((__Instance + __PointerAdjustment), playerid, weapon, ammo);
            return __ret;
        }

        public override bool GivePlayerMoney(int playerid, int money)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 8);
            var ___GivePlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int));
            var __ret = ___GivePlayerMoney_0Delegate((__Instance + __PointerAdjustment), playerid, money);
            return __ret;
        }

        public override bool SetPlayerMoney(int playerid, int money)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 8);
            var ___SetPlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int));
            var __ret = ___SetPlayerMoney_0Delegate((__Instance + __PointerAdjustment), playerid, money);
            return __ret;
        }

        public override bool ResetPlayerMoney(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 8);
            var ___ResetPlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int));
            var __ret = ___ResetPlayerMoney_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override ulong GetPlayerMoney(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 8);
            var ___GetPlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_ulong_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_ulong_IntPtr_int));
            var __ret = ___GetPlayerMoney_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override bool SetPlayerModel(int playerid, int model)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 8);
            var ___SetPlayerModel_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int));
            var __ret = ___SetPlayerModel_0Delegate((__Instance + __PointerAdjustment), playerid, model);
            return __ret;
        }

        public override int GetPlayerModel(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 8);
            var ___GetPlayerModel_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_int));
            var __ret = ___GetPlayerModel_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override bool SetPlayerName(int playerid, string name)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 8);
            var ___SetPlayerName_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string));
            var __ret = ___SetPlayerName_0Delegate((__Instance + __PointerAdjustment), playerid, name);
            return __ret;
        }

        public override string GetPlayerName(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 8);
            var ___GetPlayerName_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int));
            var __ret = new global::Std.BasicString.__Internal();
            ___GetPlayerName_0Delegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), playerid);
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(__ret))
            {
                return __basicStringRet.CStr();
            }
        }

        public override bool SetPlayerHealth(int playerid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 8);
            var ___SetPlayerHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float));
            var __ret = ___SetPlayerHealth_0Delegate((__Instance + __PointerAdjustment), playerid, health);
            return __ret;
        }

        public override float GetPlayerHealth(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 8);
            var ___GetPlayerHealth_0Delegate = (global::SharpOrange.Delegates.Func_float_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_float_IntPtr_int));
            var __ret = ___GetPlayerHealth_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override bool SetPlayerArmour(int playerid, float armour)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 8);
            var ___SetPlayerArmour_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float));
            var __ret = ___SetPlayerArmour_0Delegate((__Instance + __PointerAdjustment), playerid, armour);
            return __ret;
        }

        public override float GetPlayerArmour(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 8);
            var ___GetPlayerArmour_0Delegate = (global::SharpOrange.Delegates.Func_float_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_float_IntPtr_int));
            var __ret = ___GetPlayerArmour_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override bool SetPlayerColor(int playerid, uint color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 8);
            var ___SetPlayerColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint));
            var __ret = ___SetPlayerColor_0Delegate((__Instance + __PointerAdjustment), playerid, color);
            return __ret;
        }

        public override uint GetPlayerColor(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 8);
            var ___GetPlayerColor_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int));
            var __ret = ___GetPlayerColor_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override void BroadcastClientMessage(string message, uint color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 8);
            var ___BroadcastClientMessage_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_string_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_string_uint));
            ___BroadcastClientMessage_0Delegate((__Instance + __PointerAdjustment), message, color);
        }

        public override bool SendClientMessage(int playerid, string message, uint color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 8);
            var ___SendClientMessage_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string_uint));
            var __ret = ___SendClientMessage_0Delegate((__Instance + __PointerAdjustment), playerid, message, color);
            return __ret;
        }

        public override bool SetPlayerIntoVehicle(int playerid, uint vehicle, sbyte seat)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 8);
            var ___SetPlayerIntoVehicle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint_sbyte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint_sbyte));
            var __ret = ___SetPlayerIntoVehicle_0Delegate((__Instance + __PointerAdjustment), playerid, vehicle, seat);
            return __ret;
        }

        public override void DisablePlayerHud(int playerid, bool toggle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 8);
            var ___DisablePlayerHud_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_int_bool));
            ___DisablePlayerHud_0Delegate((__Instance + __PointerAdjustment), playerid, toggle);
        }

        public override uint GetPlayerGUID(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 31 * 8);
            var ___GetPlayerGUID_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int));
            var __ret = ___GetPlayerGUID_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override void Print(string message)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 32 * 8);
            var ___Print_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_string));
            ___Print_0Delegate((__Instance + __PointerAdjustment), message);
        }

        public override int Hash(string str)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 33 * 8);
            var ___Hash_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_string));
            var __ret = ___Hash_0Delegate((__Instance + __PointerAdjustment), str);
            return __ret;
        }

        public override uint CreateVehicle(int hash, float x, float y, float z, float heading)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 34 * 8);
            var ___CreateVehicle_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float));
            var __ret = ___CreateVehicle_0Delegate((__Instance + __PointerAdjustment), hash, x, y, z, heading);
            return __ret;
        }

        public override bool DeleteVehicle(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 35 * 8);
            var ___DeleteVehicle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___DeleteVehicle_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override bool SetVehiclePosition(uint vehid, float x, float y, float z)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 36 * 8);
            var ___SetVehiclePosition_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float));
            var __ret = ___SetVehiclePosition_0Delegate((__Instance + __PointerAdjustment), vehid, x, y, z);
            return __ret;
        }

        public override global::SharpOrange.CVector3 GetVehiclePosition(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 37 * 8);
            var ___GetVehiclePosition_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint));
            var __ret = new global::SharpOrange.CVector3.__Internal();
            ___GetVehiclePosition_0Delegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), vehid);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public override bool SetVehicleRotation(uint vehid, float rx, float ry, float rz)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 38 * 8);
            var ___SetVehicleRotation_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float));
            var __ret = ___SetVehicleRotation_0Delegate((__Instance + __PointerAdjustment), vehid, rx, ry, rz);
            return __ret;
        }

        public override global::SharpOrange.CVector3 GetVehicleRotation(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 39 * 8);
            var ___GetVehicleRotation_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint));
            var __ret = new global::SharpOrange.CVector3.__Internal();
            ___GetVehicleRotation_0Delegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), vehid);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public override bool SetVehicleColours(uint vehid, byte Color1, byte Color2)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 40 * 8);
            var ___SetVehicleColours_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_byte_byte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_byte_byte));
            var __ret = ___SetVehicleColours_0Delegate((__Instance + __PointerAdjustment), vehid, Color1, Color2);
            return __ret;
        }

        public override bool GetVehicleColours(uint vehid, byte* Color1, byte* Color2)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 41 * 8);
            var ___GetVehicleColours_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bytePtr_bytePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bytePtr_bytePtr));
            var __ret = ___GetVehicleColours_0Delegate((__Instance + __PointerAdjustment), vehid, Color1, Color2);
            return __ret;
        }

        public override bool SetVehicleTyresBulletproof(uint vehid, bool bulletproof)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 42 * 8);
            var ___SetVehicleTyresBulletproof_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool));
            var __ret = ___SetVehicleTyresBulletproof_0Delegate((__Instance + __PointerAdjustment), vehid, bulletproof);
            return __ret;
        }

        public override bool GetVehicleTyresBulletproof(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 43 * 8);
            var ___GetVehicleTyresBulletproof_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___GetVehicleTyresBulletproof_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override bool SetVehicleCustomPrimaryColor(uint vehid, int rColor, int gColor, int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 44 * 8);
            var ___SetVehicleCustomPrimaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int));
            var __ret = ___SetVehicleCustomPrimaryColor_0Delegate((__Instance + __PointerAdjustment), vehid, rColor, gColor, bColor);
            return __ret;
        }

        public override bool GetVehicleCustomPrimaryColor(uint vehid, ref int rColor, ref int gColor, ref int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 45 * 8);
            var ___GetVehicleCustomPrimaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr));
            fixed (int* __refParamPtr1 = &rColor)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &gColor)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &bColor)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = ___GetVehicleCustomPrimaryColor_0Delegate((__Instance + __PointerAdjustment), vehid, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public override bool SetVehicleCustomSecondaryColor(uint vehid, int rColor, int gColor, int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 46 * 8);
            var ___SetVehicleCustomSecondaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int));
            var __ret = ___SetVehicleCustomSecondaryColor_0Delegate((__Instance + __PointerAdjustment), vehid, rColor, gColor, bColor);
            return __ret;
        }

        public override bool GetVehicleCustomSecondaryColor(uint vehid, ref int rColor, ref int gColor, ref int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 47 * 8);
            var ___GetVehicleCustomSecondaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr));
            fixed (int* __refParamPtr1 = &rColor)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &gColor)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &bColor)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = ___GetVehicleCustomSecondaryColor_0Delegate((__Instance + __PointerAdjustment), vehid, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public override bool SetVehicleEngineStatus(uint vehid, bool status, bool locked)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 48 * 8);
            var ___SetVehicleEngineStatus_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool_bool));
            var __ret = ___SetVehicleEngineStatus_0Delegate((__Instance + __PointerAdjustment), vehid, status, locked);
            return __ret;
        }

        public override bool GetVehicleEngineStatus(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 49 * 8);
            var ___GetVehicleEngineStatus_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___GetVehicleEngineStatus_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override bool SetVehicleLocked(uint vehid, bool locked)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 50 * 8);
            var ___SetVehicleLocked_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool));
            var __ret = ___SetVehicleLocked_0Delegate((__Instance + __PointerAdjustment), vehid, locked);
            return __ret;
        }

        public override bool IsVehicleLocked(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 51 * 8);
            var ___IsVehicleLocked_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___IsVehicleLocked_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override bool SetVehicleBodyHealth(uint vehid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 52 * 8);
            var ___SetVehicleBodyHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float));
            var __ret = ___SetVehicleBodyHealth_0Delegate((__Instance + __PointerAdjustment), vehid, health);
            return __ret;
        }

        public override bool SetVehicleEngineHealth(uint vehid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 53 * 8);
            var ___SetVehicleEngineHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float));
            var __ret = ___SetVehicleEngineHealth_0Delegate((__Instance + __PointerAdjustment), vehid, health);
            return __ret;
        }

        public override bool SetVehicleTankHealth(uint vehid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 54 * 8);
            var ___SetVehicleTankHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float));
            var __ret = ___SetVehicleTankHealth_0Delegate((__Instance + __PointerAdjustment), vehid, health);
            return __ret;
        }

        public override bool GetVehicleHealth(uint vehid, ref float body, ref float engine, ref float tank)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 55 * 8);
            var ___GetVehicleHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_floatPtr_floatPtr_floatPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_floatPtr_floatPtr_floatPtr));
            fixed (float* __refParamPtr1 = &body)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &engine)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &tank)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = ___GetVehicleHealth_0Delegate((__Instance + __PointerAdjustment), vehid, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public override bool SetVehicleNumberPlate(uint vehid, string text)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 56 * 8);
            var ___SetVehicleNumberPlate_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string));
            var __ret = ___SetVehicleNumberPlate_0Delegate((__Instance + __PointerAdjustment), vehid, text);
            return __ret;
        }

        public override string GetVehicleNumberPlate(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 57 * 8);
            var ___GetVehicleNumberPlate_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint));
            var __ret = new global::Std.BasicString.__Internal();
            ___GetVehicleNumberPlate_0Delegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), vehid);
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(__ret))
            {
                return __basicStringRet.CStr();
            }
        }

        public override bool SetVehicleNumberPlateStyle(uint vehid, int style)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 58 * 8);
            var ___SetVehicleNumberPlateStyle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int));
            var __ret = ___SetVehicleNumberPlateStyle_0Delegate((__Instance + __PointerAdjustment), vehid, style);
            return __ret;
        }

        public override int GetVehicleNumberPlateStyle(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 59 * 8);
            var ___GetVehicleNumberPlateStyle_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleNumberPlateStyle_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override bool SetVehicleSirenState(uint vehid, bool state)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 60 * 8);
            var ___SetVehicleSirenState_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool));
            var __ret = ___SetVehicleSirenState_0Delegate((__Instance + __PointerAdjustment), vehid, state);
            return __ret;
        }

        public override bool GetVehicleSirenState(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 61 * 8);
            var ___GetVehicleSirenState_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___GetVehicleSirenState_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override bool SetVehicleWheelColor(uint vehid, int color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 62 * 8);
            var ___SetVehicleWheelColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int));
            var __ret = ___SetVehicleWheelColor_0Delegate((__Instance + __PointerAdjustment), vehid, color);
            return __ret;
        }

        public override int GetVehicleWheelColor(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 63 * 8);
            var ___GetVehicleWheelColor_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleWheelColor_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override bool SetVehicleWheelType(uint vehid, int type)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 64 * 8);
            var ___SetVehicleWheelType_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int));
            var __ret = ___SetVehicleWheelType_0Delegate((__Instance + __PointerAdjustment), vehid, type);
            return __ret;
        }

        public override int GetVehicleWheelType(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 65 * 8);
            var ___GetVehicleWheelType_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleWheelType_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override int GetVehicleDriver(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 66 * 8);
            var ___GetVehicleDriver_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleDriver_0Delegate((__Instance + __PointerAdjustment), vehid);
            return __ret;
        }

        public override uint CreateObject(int model, float x, float y, float z, float pitch, float yaw, float roll)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 68 * 8);
            var ___CreateObject_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float_float));
            var __ret = ___CreateObject_0Delegate((__Instance + __PointerAdjustment), model, x, y, z, pitch, yaw, roll);
            return __ret;
        }

        public override bool DeleteObject(uint guid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 69 * 8);
            var ___DeleteObject_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___DeleteObject_0Delegate((__Instance + __PointerAdjustment), guid);
            return __ret;
        }

        public override bool CreatePickup(int type, float x, float y, float z, float scale)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 70 * 8);
            var ___CreatePickup_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float));
            var __ret = ___CreatePickup_0Delegate((__Instance + __PointerAdjustment), type, x, y, z, scale);
            return __ret;
        }

        public override uint CreateBlipForAll(string name, float x, float y, float z, float scale, int color, int sprite)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 71 * 8);
            var ___CreateBlipForAll_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_std_basic_string___Internal_float_float_float_float_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_std_basic_string___Internal_float_float_float_float_int_int));
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(name, __allocator0);
            var __arg0 = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
            var __ret = ___CreateBlipForAll_0Delegate((__Instance + __PointerAdjustment), __arg0, x, y, z, scale, color, sprite);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            return __ret;
        }

        public override uint CreateBlipForPlayer(int playerid, string name, float x, float y, float z, float scale, int color, int sprite)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 72 * 8);
            var ___CreateBlipForPlayer_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_std_basic_string___Internal_float_float_float_float_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_std_basic_string___Internal_float_float_float_float_int_int));
            var __allocator1 = new global::Std.Allocator();
            var __basicString1 = new global::Std.BasicString(name, __allocator1);
            var __arg1 = *(global::Std.BasicString.__Internal*) __basicString1.__Instance;
            var __ret = ___CreateBlipForPlayer_0Delegate((__Instance + __PointerAdjustment), playerid, __arg1, x, y, z, scale, color, sprite);
            __basicString1.Dispose(false);
            __allocator1.Dispose();
            return __ret;
        }

        public override void DeleteBlip(uint guid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 73 * 8);
            var ___DeleteBlip_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint));
            ___DeleteBlip_0Delegate((__Instance + __PointerAdjustment), guid);
        }

        public override void SetBlipColor(uint guid, int color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 74 * 8);
            var ___SetBlipColor_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_int));
            ___SetBlipColor_0Delegate((__Instance + __PointerAdjustment), guid, color);
        }

        public override void SetBlipScale(uint guid, float scale)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 75 * 8);
            var ___SetBlipScale_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_float));
            ___SetBlipScale_0Delegate((__Instance + __PointerAdjustment), guid, scale);
        }

        public override void SetBlipRoute(uint guid, bool route)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 76 * 8);
            var ___SetBlipRoute_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_bool));
            ___SetBlipRoute_0Delegate((__Instance + __PointerAdjustment), guid, route);
        }

        public override void SetBlipSprite(uint guid, int sprite)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 77 * 8);
            var ___SetBlipSprite_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_int));
            ___SetBlipSprite_0Delegate((__Instance + __PointerAdjustment), guid, sprite);
        }

        public override void SetBlipName(uint guid, string name)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 78 * 8);
            var ___SetBlipName_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_std_basic_string___Internal) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_std_basic_string___Internal));
            var __allocator1 = new global::Std.Allocator();
            var __basicString1 = new global::Std.BasicString(name, __allocator1);
            var __arg1 = *(global::Std.BasicString.__Internal*) __basicString1.__Instance;
            ___SetBlipName_0Delegate((__Instance + __PointerAdjustment), guid, __arg1);
            __basicString1.Dispose(false);
            __allocator1.Dispose();
        }

        public override void SetBlipAsShortRange(uint guid, bool _short)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 79 * 8);
            var ___SetBlipAsShortRange_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_bool));
            ___SetBlipAsShortRange_0Delegate((__Instance + __PointerAdjustment), guid, _short);
        }

        public override void AttachBlipToPlayer(uint _guid, int player)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 80 * 8);
            var ___AttachBlipToPlayer_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_int));
            ___AttachBlipToPlayer_0Delegate((__Instance + __PointerAdjustment), _guid, player);
        }

        public override void AttachBlipToVehicle(uint _guid, uint vehicle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 81 * 8);
            var ___AttachBlipToVehicle_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_uint));
            ___AttachBlipToVehicle_0Delegate((__Instance + __PointerAdjustment), _guid, vehicle);
        }

        public override uint CreateMarkerForAll(float x, float y, float z, float height, float radius)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 82 * 8);
            var ___CreateMarkerForAll_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_float_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_float_float_float_float_float));
            var __ret = ___CreateMarkerForAll_0Delegate((__Instance + __PointerAdjustment), x, y, z, height, radius);
            return __ret;
        }

        public override uint CreateMarkerForPlayer(int playerid, float x, float y, float z, float height, float radius)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 83 * 8);
            var ___CreateMarkerForPlayer_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float));
            var __ret = ___CreateMarkerForPlayer_0Delegate((__Instance + __PointerAdjustment), playerid, x, y, z, height, radius);
            return __ret;
        }

        public override void DeleteMarker(uint guid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 84 * 8);
            var ___DeleteMarker_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint));
            ___DeleteMarker_0Delegate((__Instance + __PointerAdjustment), guid);
        }

        public override bool SendNotification(int playerid, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 85 * 8);
            var ___SendNotification_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string));
            var __ret = ___SendNotification_0Delegate((__Instance + __PointerAdjustment), playerid, msg);
            return __ret;
        }

        public override bool SetInfoMsg(int playerid, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 86 * 8);
            var ___SetInfoMsg_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string));
            var __ret = ___SetInfoMsg_0Delegate((__Instance + __PointerAdjustment), playerid, msg);
            return __ret;
        }

        public override bool UnsetInfoMsg(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 87 * 8);
            var ___UnsetInfoMsg_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int));
            var __ret = ___UnsetInfoMsg_0Delegate((__Instance + __PointerAdjustment), playerid);
            return __ret;
        }

        public override uint Create3DText(string text, float x, float y, float z, int color, int outColor, float fontSize)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 88 * 8);
            var ___Create3DText_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_string_float_float_float_int_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_string_float_float_float_int_int_float));
            var __ret = ___Create3DText_0Delegate((__Instance + __PointerAdjustment), text, x, y, z, color, outColor, fontSize);
            return __ret;
        }

        public override uint Create3DTextForPlayer(uint player, string text, float x, float y, float z, int color, int outColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 89 * 8);
            var ___Create3DTextForPlayer_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_uint_string_float_float_float_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_uint_string_float_float_float_int_int));
            var __ret = ___Create3DTextForPlayer_0Delegate((__Instance + __PointerAdjustment), player, text, x, y, z, color, outColor);
            return __ret;
        }

        public override bool Attach3DTextToVehicle(uint textId, uint vehicle, float oX, float oY, float oZ)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 90 * 8);
            var ___Attach3DTextToVehicle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float));
            var __ret = ___Attach3DTextToVehicle_0Delegate((__Instance + __PointerAdjustment), textId, vehicle, oX, oY, oZ);
            return __ret;
        }

        public override bool Attach3DTextToPlayer(uint textId, uint player, float oX, float oY, float oZ)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 91 * 8);
            var ___Attach3DTextToPlayer_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float));
            var __ret = ___Attach3DTextToPlayer_0Delegate((__Instance + __PointerAdjustment), textId, player, oX, oY, oZ);
            return __ret;
        }

        public override bool Set3DTextContent(uint textId, string text)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 92 * 8);
            var ___Set3DTextContent_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string));
            var __ret = ___Set3DTextContent_0Delegate((__Instance + __PointerAdjustment), textId, text);
            return __ret;
        }

        public override bool Delete3DText(uint textId)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 93 * 8);
            var ___Delete3DText_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___Delete3DText_0Delegate((__Instance + __PointerAdjustment), textId);
            return __ret;
        }
    }

    public unsafe partial class APIInternal : global::SharpOrange.API, IDisposable
    {
        private static void* __CopyValue(global::SharpOrange.API.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpOrange.API.__Internal));
            *(global::SharpOrange.API.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal APIInternal(global::SharpOrange.API.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal APIInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override void LoadClientScript(string name, sbyte* buffer, ulong size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 8);
            var ___LoadClientScript_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_std_basic_string___Internal_sbytePtr_ulong) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_std_basic_string___Internal_sbytePtr_ulong));
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(name, __allocator0);
            var __arg0 = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
            ___LoadClientScript_0Delegate((__Instance), __arg0, buffer, size);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
        }

        public override void KickPlayer(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 8);
            var ___KickPlayer_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_int));
            ___KickPlayer_0Delegate((__Instance), playerid);
        }

        public override void KickPlayer(int playerid, string reason)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 8);
            var ___KickPlayer_1Delegate = (global::SharpOrange.Delegates.Action_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_int_string));
            ___KickPlayer_1Delegate((__Instance), playerid, reason);
        }

        public override bool SetPlayerPosition(int playerid, float x, float y, float z)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 8);
            var ___SetPlayerPosition_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float));
            var __ret = ___SetPlayerPosition_0Delegate((__Instance), playerid, x, y, z);
            return __ret;
        }

        public override global::SharpOrange.CVector3 GetPlayerPosition(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 8);
            var ___GetPlayerPosition_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int));
            var __ret = new global::SharpOrange.CVector3.__Internal();
            ___GetPlayerPosition_0Delegate((__Instance), new IntPtr(&__ret), playerid);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public override bool IsPlayerInRange(int playerid, float x, float y, float z, float range)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 8);
            var ___IsPlayerInRange_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float));
            var __ret = ___IsPlayerInRange_0Delegate((__Instance), playerid, x, y, z, range);
            return __ret;
        }

        public override bool SetPlayerHeading(int playerid, float angle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 8);
            var ___SetPlayerHeading_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float));
            var __ret = ___SetPlayerHeading_0Delegate((__Instance), playerid, angle);
            return __ret;
        }

        public override float GetPlayerHeading(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 8);
            var ___GetPlayerHeading_0Delegate = (global::SharpOrange.Delegates.Func_float_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_float_IntPtr_int));
            var __ret = ___GetPlayerHeading_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override bool RemovePlayerWeapons(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 8);
            var ___RemovePlayerWeapons_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int));
            var __ret = ___RemovePlayerWeapons_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override bool GivePlayerWeapon(int playerid, int weapon, int ammo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 8);
            var ___GivePlayerWeapon_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___GivePlayerWeapon_0Delegate((__Instance), playerid, weapon, ammo);
            return __ret;
        }

        public override bool GivePlayerAmmo(int playerid, int weapon, int ammo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 8);
            var ___GivePlayerAmmo_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___GivePlayerAmmo_0Delegate((__Instance), playerid, weapon, ammo);
            return __ret;
        }

        public override bool GivePlayerMoney(int playerid, int money)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 8);
            var ___GivePlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int));
            var __ret = ___GivePlayerMoney_0Delegate((__Instance), playerid, money);
            return __ret;
        }

        public override bool SetPlayerMoney(int playerid, int money)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 8);
            var ___SetPlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int));
            var __ret = ___SetPlayerMoney_0Delegate((__Instance), playerid, money);
            return __ret;
        }

        public override bool ResetPlayerMoney(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 8);
            var ___ResetPlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int));
            var __ret = ___ResetPlayerMoney_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override ulong GetPlayerMoney(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 8);
            var ___GetPlayerMoney_0Delegate = (global::SharpOrange.Delegates.Func_ulong_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_ulong_IntPtr_int));
            var __ret = ___GetPlayerMoney_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override bool SetPlayerModel(int playerid, int model)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 8);
            var ___SetPlayerModel_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_int));
            var __ret = ___SetPlayerModel_0Delegate((__Instance), playerid, model);
            return __ret;
        }

        public override int GetPlayerModel(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 8);
            var ___GetPlayerModel_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_int));
            var __ret = ___GetPlayerModel_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override bool SetPlayerName(int playerid, string name)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 8);
            var ___SetPlayerName_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string));
            var __ret = ___SetPlayerName_0Delegate((__Instance), playerid, name);
            return __ret;
        }

        public override string GetPlayerName(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 8);
            var ___GetPlayerName_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_int));
            var __ret = new global::Std.BasicString.__Internal();
            ___GetPlayerName_0Delegate((__Instance), new IntPtr(&__ret), playerid);
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(__ret))
            {
                return __basicStringRet.CStr();
            }
        }

        public override bool SetPlayerHealth(int playerid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 8);
            var ___SetPlayerHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float));
            var __ret = ___SetPlayerHealth_0Delegate((__Instance), playerid, health);
            return __ret;
        }

        public override float GetPlayerHealth(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 8);
            var ___GetPlayerHealth_0Delegate = (global::SharpOrange.Delegates.Func_float_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_float_IntPtr_int));
            var __ret = ___GetPlayerHealth_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override bool SetPlayerArmour(int playerid, float armour)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 8);
            var ___SetPlayerArmour_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float));
            var __ret = ___SetPlayerArmour_0Delegate((__Instance), playerid, armour);
            return __ret;
        }

        public override float GetPlayerArmour(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 8);
            var ___GetPlayerArmour_0Delegate = (global::SharpOrange.Delegates.Func_float_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_float_IntPtr_int));
            var __ret = ___GetPlayerArmour_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override bool SetPlayerColor(int playerid, uint color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 8);
            var ___SetPlayerColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint));
            var __ret = ___SetPlayerColor_0Delegate((__Instance), playerid, color);
            return __ret;
        }

        public override uint GetPlayerColor(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 8);
            var ___GetPlayerColor_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int));
            var __ret = ___GetPlayerColor_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override void BroadcastClientMessage(string message, uint color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 8);
            var ___BroadcastClientMessage_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_string_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_string_uint));
            ___BroadcastClientMessage_0Delegate((__Instance), message, color);
        }

        public override bool SendClientMessage(int playerid, string message, uint color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 8);
            var ___SendClientMessage_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string_uint));
            var __ret = ___SendClientMessage_0Delegate((__Instance), playerid, message, color);
            return __ret;
        }

        public override bool SetPlayerIntoVehicle(int playerid, uint vehicle, sbyte seat)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 8);
            var ___SetPlayerIntoVehicle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint_sbyte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_uint_sbyte));
            var __ret = ___SetPlayerIntoVehicle_0Delegate((__Instance), playerid, vehicle, seat);
            return __ret;
        }

        public override void DisablePlayerHud(int playerid, bool toggle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 8);
            var ___DisablePlayerHud_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_int_bool));
            ___DisablePlayerHud_0Delegate((__Instance), playerid, toggle);
        }

        public override uint GetPlayerGUID(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 31 * 8);
            var ___GetPlayerGUID_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int));
            var __ret = ___GetPlayerGUID_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override void Print(string message)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 32 * 8);
            var ___Print_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_string));
            ___Print_0Delegate((__Instance), message);
        }

        public override int Hash(string str)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 33 * 8);
            var ___Hash_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_string));
            var __ret = ___Hash_0Delegate((__Instance), str);
            return __ret;
        }

        public override uint CreateVehicle(int hash, float x, float y, float z, float heading)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 34 * 8);
            var ___CreateVehicle_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float));
            var __ret = ___CreateVehicle_0Delegate((__Instance), hash, x, y, z, heading);
            return __ret;
        }

        public override bool DeleteVehicle(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 35 * 8);
            var ___DeleteVehicle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___DeleteVehicle_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override bool SetVehiclePosition(uint vehid, float x, float y, float z)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 36 * 8);
            var ___SetVehiclePosition_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float));
            var __ret = ___SetVehiclePosition_0Delegate((__Instance), vehid, x, y, z);
            return __ret;
        }

        public override global::SharpOrange.CVector3 GetVehiclePosition(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 37 * 8);
            var ___GetVehiclePosition_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint));
            var __ret = new global::SharpOrange.CVector3.__Internal();
            ___GetVehiclePosition_0Delegate((__Instance), new IntPtr(&__ret), vehid);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public override bool SetVehicleRotation(uint vehid, float rx, float ry, float rz)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 38 * 8);
            var ___SetVehicleRotation_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float_float_float));
            var __ret = ___SetVehicleRotation_0Delegate((__Instance), vehid, rx, ry, rz);
            return __ret;
        }

        public override global::SharpOrange.CVector3 GetVehicleRotation(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 39 * 8);
            var ___GetVehicleRotation_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint));
            var __ret = new global::SharpOrange.CVector3.__Internal();
            ___GetVehicleRotation_0Delegate((__Instance), new IntPtr(&__ret), vehid);
            return global::SharpOrange.CVector3.__CreateInstance(__ret);
        }

        public override bool SetVehicleColours(uint vehid, byte Color1, byte Color2)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 40 * 8);
            var ___SetVehicleColours_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_byte_byte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_byte_byte));
            var __ret = ___SetVehicleColours_0Delegate((__Instance), vehid, Color1, Color2);
            return __ret;
        }

        public override bool GetVehicleColours(uint vehid, byte* Color1, byte* Color2)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 41 * 8);
            var ___GetVehicleColours_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bytePtr_bytePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bytePtr_bytePtr));
            var __ret = ___GetVehicleColours_0Delegate((__Instance), vehid, Color1, Color2);
            return __ret;
        }

        public override bool SetVehicleTyresBulletproof(uint vehid, bool bulletproof)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 42 * 8);
            var ___SetVehicleTyresBulletproof_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool));
            var __ret = ___SetVehicleTyresBulletproof_0Delegate((__Instance), vehid, bulletproof);
            return __ret;
        }

        public override bool GetVehicleTyresBulletproof(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 43 * 8);
            var ___GetVehicleTyresBulletproof_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___GetVehicleTyresBulletproof_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override bool SetVehicleCustomPrimaryColor(uint vehid, int rColor, int gColor, int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 44 * 8);
            var ___SetVehicleCustomPrimaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int));
            var __ret = ___SetVehicleCustomPrimaryColor_0Delegate((__Instance), vehid, rColor, gColor, bColor);
            return __ret;
        }

        public override bool GetVehicleCustomPrimaryColor(uint vehid, ref int rColor, ref int gColor, ref int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 45 * 8);
            var ___GetVehicleCustomPrimaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr));
            fixed (int* __refParamPtr1 = &rColor)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &gColor)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &bColor)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = ___GetVehicleCustomPrimaryColor_0Delegate((__Instance), vehid, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public override bool SetVehicleCustomSecondaryColor(uint vehid, int rColor, int gColor, int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 46 * 8);
            var ___SetVehicleCustomSecondaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int_int_int));
            var __ret = ___SetVehicleCustomSecondaryColor_0Delegate((__Instance), vehid, rColor, gColor, bColor);
            return __ret;
        }

        public override bool GetVehicleCustomSecondaryColor(uint vehid, ref int rColor, ref int gColor, ref int bColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 47 * 8);
            var ___GetVehicleCustomSecondaryColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_intPtr_intPtr_intPtr));
            fixed (int* __refParamPtr1 = &rColor)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &gColor)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &bColor)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = ___GetVehicleCustomSecondaryColor_0Delegate((__Instance), vehid, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public override bool SetVehicleEngineStatus(uint vehid, bool status, bool locked)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 48 * 8);
            var ___SetVehicleEngineStatus_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool_bool));
            var __ret = ___SetVehicleEngineStatus_0Delegate((__Instance), vehid, status, locked);
            return __ret;
        }

        public override bool GetVehicleEngineStatus(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 49 * 8);
            var ___GetVehicleEngineStatus_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___GetVehicleEngineStatus_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override bool SetVehicleLocked(uint vehid, bool locked)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 50 * 8);
            var ___SetVehicleLocked_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool));
            var __ret = ___SetVehicleLocked_0Delegate((__Instance), vehid, locked);
            return __ret;
        }

        public override bool IsVehicleLocked(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 51 * 8);
            var ___IsVehicleLocked_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___IsVehicleLocked_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override bool SetVehicleBodyHealth(uint vehid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 52 * 8);
            var ___SetVehicleBodyHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float));
            var __ret = ___SetVehicleBodyHealth_0Delegate((__Instance), vehid, health);
            return __ret;
        }

        public override bool SetVehicleEngineHealth(uint vehid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 53 * 8);
            var ___SetVehicleEngineHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float));
            var __ret = ___SetVehicleEngineHealth_0Delegate((__Instance), vehid, health);
            return __ret;
        }

        public override bool SetVehicleTankHealth(uint vehid, float health)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 54 * 8);
            var ___SetVehicleTankHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_float));
            var __ret = ___SetVehicleTankHealth_0Delegate((__Instance), vehid, health);
            return __ret;
        }

        public override bool GetVehicleHealth(uint vehid, ref float body, ref float engine, ref float tank)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 55 * 8);
            var ___GetVehicleHealth_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_floatPtr_floatPtr_floatPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_floatPtr_floatPtr_floatPtr));
            fixed (float* __refParamPtr1 = &body)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &engine)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &tank)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = ___GetVehicleHealth_0Delegate((__Instance), vehid, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public override bool SetVehicleNumberPlate(uint vehid, string text)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 56 * 8);
            var ___SetVehicleNumberPlate_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string));
            var __ret = ___SetVehicleNumberPlate_0Delegate((__Instance), vehid, text);
            return __ret;
        }

        public override string GetVehicleNumberPlate(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 57 * 8);
            var ___GetVehicleNumberPlate_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_IntPtr_uint));
            var __ret = new global::Std.BasicString.__Internal();
            ___GetVehicleNumberPlate_0Delegate((__Instance), new IntPtr(&__ret), vehid);
            using (var __basicStringRet = global::Std.BasicString.__CreateInstance(__ret))
            {
                return __basicStringRet.CStr();
            }
        }

        public override bool SetVehicleNumberPlateStyle(uint vehid, int style)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 58 * 8);
            var ___SetVehicleNumberPlateStyle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int));
            var __ret = ___SetVehicleNumberPlateStyle_0Delegate((__Instance), vehid, style);
            return __ret;
        }

        public override int GetVehicleNumberPlateStyle(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 59 * 8);
            var ___GetVehicleNumberPlateStyle_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleNumberPlateStyle_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override bool SetVehicleSirenState(uint vehid, bool state)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 60 * 8);
            var ___SetVehicleSirenState_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_bool));
            var __ret = ___SetVehicleSirenState_0Delegate((__Instance), vehid, state);
            return __ret;
        }

        public override bool GetVehicleSirenState(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 61 * 8);
            var ___GetVehicleSirenState_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___GetVehicleSirenState_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override bool SetVehicleWheelColor(uint vehid, int color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 62 * 8);
            var ___SetVehicleWheelColor_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int));
            var __ret = ___SetVehicleWheelColor_0Delegate((__Instance), vehid, color);
            return __ret;
        }

        public override int GetVehicleWheelColor(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 63 * 8);
            var ___GetVehicleWheelColor_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleWheelColor_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override bool SetVehicleWheelType(uint vehid, int type)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 64 * 8);
            var ___SetVehicleWheelType_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_int));
            var __ret = ___SetVehicleWheelType_0Delegate((__Instance), vehid, type);
            return __ret;
        }

        public override int GetVehicleWheelType(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 65 * 8);
            var ___GetVehicleWheelType_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleWheelType_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override int GetVehicleDriver(uint vehid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 66 * 8);
            var ___GetVehicleDriver_0Delegate = (global::SharpOrange.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_int_IntPtr_uint));
            var __ret = ___GetVehicleDriver_0Delegate((__Instance), vehid);
            return __ret;
        }

        public override uint CreateObject(int model, float x, float y, float z, float pitch, float yaw, float roll)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 68 * 8);
            var ___CreateObject_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float_float));
            var __ret = ___CreateObject_0Delegate((__Instance), model, x, y, z, pitch, yaw, roll);
            return __ret;
        }

        public override bool DeleteObject(uint guid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 69 * 8);
            var ___DeleteObject_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___DeleteObject_0Delegate((__Instance), guid);
            return __ret;
        }

        public override bool CreatePickup(int type, float x, float y, float z, float scale)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 70 * 8);
            var ___CreatePickup_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_float_float_float_float));
            var __ret = ___CreatePickup_0Delegate((__Instance), type, x, y, z, scale);
            return __ret;
        }

        public override uint CreateBlipForAll(string name, float x, float y, float z, float scale, int color, int sprite)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 71 * 8);
            var ___CreateBlipForAll_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_std_basic_string___Internal_float_float_float_float_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_std_basic_string___Internal_float_float_float_float_int_int));
            var __allocator0 = new global::Std.Allocator();
            var __basicString0 = new global::Std.BasicString(name, __allocator0);
            var __arg0 = *(global::Std.BasicString.__Internal*) __basicString0.__Instance;
            var __ret = ___CreateBlipForAll_0Delegate((__Instance), __arg0, x, y, z, scale, color, sprite);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            return __ret;
        }

        public override uint CreateBlipForPlayer(int playerid, string name, float x, float y, float z, float scale, int color, int sprite)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 72 * 8);
            var ___CreateBlipForPlayer_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_std_basic_string___Internal_float_float_float_float_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_std_basic_string___Internal_float_float_float_float_int_int));
            var __allocator1 = new global::Std.Allocator();
            var __basicString1 = new global::Std.BasicString(name, __allocator1);
            var __arg1 = *(global::Std.BasicString.__Internal*) __basicString1.__Instance;
            var __ret = ___CreateBlipForPlayer_0Delegate((__Instance), playerid, __arg1, x, y, z, scale, color, sprite);
            __basicString1.Dispose(false);
            __allocator1.Dispose();
            return __ret;
        }

        public override void DeleteBlip(uint guid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 73 * 8);
            var ___DeleteBlip_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint));
            ___DeleteBlip_0Delegate((__Instance), guid);
        }

        public override void SetBlipColor(uint guid, int color)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 74 * 8);
            var ___SetBlipColor_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_int));
            ___SetBlipColor_0Delegate((__Instance), guid, color);
        }

        public override void SetBlipScale(uint guid, float scale)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 75 * 8);
            var ___SetBlipScale_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_float));
            ___SetBlipScale_0Delegate((__Instance), guid, scale);
        }

        public override void SetBlipRoute(uint guid, bool route)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 76 * 8);
            var ___SetBlipRoute_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_bool));
            ___SetBlipRoute_0Delegate((__Instance), guid, route);
        }

        public override void SetBlipSprite(uint guid, int sprite)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 77 * 8);
            var ___SetBlipSprite_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_int));
            ___SetBlipSprite_0Delegate((__Instance), guid, sprite);
        }

        public override void SetBlipName(uint guid, string name)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 78 * 8);
            var ___SetBlipName_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_std_basic_string___Internal) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_std_basic_string___Internal));
            var __allocator1 = new global::Std.Allocator();
            var __basicString1 = new global::Std.BasicString(name, __allocator1);
            var __arg1 = *(global::Std.BasicString.__Internal*) __basicString1.__Instance;
            ___SetBlipName_0Delegate((__Instance), guid, __arg1);
            __basicString1.Dispose(false);
            __allocator1.Dispose();
        }

        public override void SetBlipAsShortRange(uint guid, bool _short)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 79 * 8);
            var ___SetBlipAsShortRange_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_bool));
            ___SetBlipAsShortRange_0Delegate((__Instance), guid, _short);
        }

        public override void AttachBlipToPlayer(uint _guid, int player)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 80 * 8);
            var ___AttachBlipToPlayer_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_int));
            ___AttachBlipToPlayer_0Delegate((__Instance), _guid, player);
        }

        public override void AttachBlipToVehicle(uint _guid, uint vehicle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 81 * 8);
            var ___AttachBlipToVehicle_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint_uint));
            ___AttachBlipToVehicle_0Delegate((__Instance), _guid, vehicle);
        }

        public override uint CreateMarkerForAll(float x, float y, float z, float height, float radius)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 82 * 8);
            var ___CreateMarkerForAll_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_float_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_float_float_float_float_float));
            var __ret = ___CreateMarkerForAll_0Delegate((__Instance), x, y, z, height, radius);
            return __ret;
        }

        public override uint CreateMarkerForPlayer(int playerid, float x, float y, float z, float height, float radius)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 83 * 8);
            var ___CreateMarkerForPlayer_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_int_float_float_float_float_float));
            var __ret = ___CreateMarkerForPlayer_0Delegate((__Instance), playerid, x, y, z, height, radius);
            return __ret;
        }

        public override void DeleteMarker(uint guid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 84 * 8);
            var ___DeleteMarker_0Delegate = (global::SharpOrange.Delegates.Action_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Action_IntPtr_uint));
            ___DeleteMarker_0Delegate((__Instance), guid);
        }

        public override bool SendNotification(int playerid, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 85 * 8);
            var ___SendNotification_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string));
            var __ret = ___SendNotification_0Delegate((__Instance), playerid, msg);
            return __ret;
        }

        public override bool SetInfoMsg(int playerid, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 86 * 8);
            var ___SetInfoMsg_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int_string));
            var __ret = ___SetInfoMsg_0Delegate((__Instance), playerid, msg);
            return __ret;
        }

        public override bool UnsetInfoMsg(int playerid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 87 * 8);
            var ___UnsetInfoMsg_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_int));
            var __ret = ___UnsetInfoMsg_0Delegate((__Instance), playerid);
            return __ret;
        }

        public override uint Create3DText(string text, float x, float y, float z, int color, int outColor, float fontSize)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 88 * 8);
            var ___Create3DText_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_string_float_float_float_int_int_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_string_float_float_float_int_int_float));
            var __ret = ___Create3DText_0Delegate((__Instance), text, x, y, z, color, outColor, fontSize);
            return __ret;
        }

        public override uint Create3DTextForPlayer(uint player, string text, float x, float y, float z, int color, int outColor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 89 * 8);
            var ___Create3DTextForPlayer_0Delegate = (global::SharpOrange.Delegates.Func_uint_IntPtr_uint_string_float_float_float_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_uint_IntPtr_uint_string_float_float_float_int_int));
            var __ret = ___Create3DTextForPlayer_0Delegate((__Instance), player, text, x, y, z, color, outColor);
            return __ret;
        }

        public override bool Attach3DTextToVehicle(uint textId, uint vehicle, float oX, float oY, float oZ)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 90 * 8);
            var ___Attach3DTextToVehicle_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float));
            var __ret = ___Attach3DTextToVehicle_0Delegate((__Instance), textId, vehicle, oX, oY, oZ);
            return __ret;
        }

        public override bool Attach3DTextToPlayer(uint textId, uint player, float oX, float oY, float oZ)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 91 * 8);
            var ___Attach3DTextToPlayer_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_uint_float_float_float));
            var __ret = ___Attach3DTextToPlayer_0Delegate((__Instance), textId, player, oX, oY, oZ);
            return __ret;
        }

        public override bool Set3DTextContent(uint textId, string text)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 92 * 8);
            var ___Set3DTextContent_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint_string));
            var __ret = ___Set3DTextContent_0Delegate((__Instance), textId, text);
            return __ret;
        }

        public override bool Delete3DText(uint textId)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 93 * 8);
            var ___Delete3DText_0Delegate = (global::SharpOrange.Delegates.Func_bool_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::SharpOrange.Delegates.Func_bool_IntPtr_uint));
            var __ret = ___Delete3DText_0Delegate((__Instance), textId);
            return __ret;
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_std_basic_string___Internal_sbytePtr_ulong(global::System.IntPtr instance, global::Std.BasicString.__Internal arg1, sbyte* arg2, ulong arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_int(global::System.IntPtr instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_int_string(global::System.IntPtr instance, int arg1, [MarshalAs(UnmanagedType.LPStr)] string arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_float_float_float(global::System.IntPtr instance, int arg1, float arg2, float arg3, float arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_IntPtr_int(global::System.IntPtr instance, global::System.IntPtr arg1, int arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_float_float_float_float(global::System.IntPtr instance, int arg1, float arg2, float arg3, float arg4, float arg5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_float(global::System.IntPtr instance, int arg1, float arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate float Func_float_IntPtr_int(global::System.IntPtr instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int(global::System.IntPtr instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_int_int(global::System.IntPtr instance, int arg1, int arg2, int arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_int(global::System.IntPtr instance, int arg1, int arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate ulong Func_ulong_IntPtr_int(global::System.IntPtr instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int_IntPtr_int(global::System.IntPtr instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_string(global::System.IntPtr instance, int arg1, [MarshalAs(UnmanagedType.LPStr)] string arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_uint(global::System.IntPtr instance, int arg1, uint arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_int(global::System.IntPtr instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_string_uint(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string arg1, uint arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_string_uint(global::System.IntPtr instance, int arg1, [MarshalAs(UnmanagedType.LPStr)] string arg2, uint arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_int_uint_sbyte(global::System.IntPtr instance, int arg1, uint arg2, sbyte arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_int_bool(global::System.IntPtr instance, int arg1, bool arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_string(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int_IntPtr_string(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_int_float_float_float_float(global::System.IntPtr instance, int arg1, float arg2, float arg3, float arg4, float arg5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint(global::System.IntPtr instance, uint arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_float_float_float(global::System.IntPtr instance, uint arg1, float arg2, float arg3, float arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_IntPtr_uint(global::System.IntPtr instance, global::System.IntPtr arg1, uint arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_byte_byte(global::System.IntPtr instance, uint arg1, byte arg2, byte arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_bytePtr_bytePtr(global::System.IntPtr instance, uint arg1, byte* arg2, byte* arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_bool(global::System.IntPtr instance, uint arg1, bool arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_int_int_int(global::System.IntPtr instance, uint arg1, int arg2, int arg3, int arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_intPtr_intPtr_intPtr(global::System.IntPtr instance, uint arg1, int* arg2, int* arg3, int* arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_bool_bool(global::System.IntPtr instance, uint arg1, bool arg2, bool arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_float(global::System.IntPtr instance, uint arg1, float arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_floatPtr_floatPtr_floatPtr(global::System.IntPtr instance, uint arg1, float* arg2, float* arg3, float* arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_string(global::System.IntPtr instance, uint arg1, [MarshalAs(UnmanagedType.LPStr)] string arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_int(global::System.IntPtr instance, uint arg1, int arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int_IntPtr_uint(global::System.IntPtr instance, uint arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_int_float_float_float_float_float_float(global::System.IntPtr instance, int arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_std_basic_string___Internal_float_float_float_float_int_int(global::System.IntPtr instance, global::Std.BasicString.__Internal arg1, float arg2, float arg3, float arg4, float arg5, int arg6, int arg7);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_int_std_basic_string___Internal_float_float_float_float_int_int(global::System.IntPtr instance, int arg1, global::Std.BasicString.__Internal arg2, float arg3, float arg4, float arg5, float arg6, int arg7, int arg8);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_uint(global::System.IntPtr instance, uint arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_uint_int(global::System.IntPtr instance, uint arg1, int arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_uint_float(global::System.IntPtr instance, uint arg1, float arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_uint_bool(global::System.IntPtr instance, uint arg1, bool arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_uint_std_basic_string___Internal(global::System.IntPtr instance, uint arg1, global::Std.BasicString.__Internal arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate void Action_IntPtr_uint_uint(global::System.IntPtr instance, uint arg1, uint arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_float_float_float_float_float(global::System.IntPtr instance, float arg1, float arg2, float arg3, float arg4, float arg5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_int_float_float_float_float_float(global::System.IntPtr instance, int arg1, float arg2, float arg3, float arg4, float arg5, float arg6);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_string_float_float_float_int_int_float(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string arg1, float arg2, float arg3, float arg4, int arg5, int arg6, float arg7);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint_IntPtr_uint_string_float_float_float_int_int(global::System.IntPtr instance, uint arg1, [MarshalAs(UnmanagedType.LPStr)] string arg2, float arg3, float arg4, float arg5, int arg6, int arg7);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        internal unsafe delegate bool Func_bool_IntPtr_uint_uint_float_float_float(global::System.IntPtr instance, uint arg1, uint arg2, float arg3, float arg4, float arg5);
    }
}
