//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CVector3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CVector3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CVector3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CVector3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OrangeDotNETModulePINVOKE.delete_CVector3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public float fX {
    set {
      OrangeDotNETModulePINVOKE.CVector3_fX_set(swigCPtr, value);
    } 
    get {
      float ret = OrangeDotNETModulePINVOKE.CVector3_fX_get(swigCPtr);
      return ret;
    } 
  }

  public float fY {
    set {
      OrangeDotNETModulePINVOKE.CVector3_fY_set(swigCPtr, value);
    } 
    get {
      float ret = OrangeDotNETModulePINVOKE.CVector3_fY_get(swigCPtr);
      return ret;
    } 
  }

  public float fZ {
    set {
      OrangeDotNETModulePINVOKE.CVector3_fZ_set(swigCPtr, value);
    } 
    get {
      float ret = OrangeDotNETModulePINVOKE.CVector3_fZ_get(swigCPtr);
      return ret;
    } 
  }

  public CVector3() : this(OrangeDotNETModulePINVOKE.new_CVector3__SWIG_0(), true) {
  }

  public CVector3(float _fX, float _fY, float _fZ) : this(OrangeDotNETModulePINVOKE.new_CVector3__SWIG_1(_fX, _fY, _fZ), true) {
  }

  public bool IsEmpty() {
    bool ret = OrangeDotNETModulePINVOKE.CVector3_IsEmpty(swigCPtr);
    return ret;
  }

  public float Length() {
    float ret = OrangeDotNETModulePINVOKE.CVector3_Length(swigCPtr);
    return ret;
  }

  public void Normalize() {
    OrangeDotNETModulePINVOKE.CVector3_Normalize(swigCPtr);
  }

  public SWIGTYPE_p_std__string ToString() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(OrangeDotNETModulePINVOKE.CVector3_ToString(swigCPtr), true);
    return ret;
  }

  public static CVector3 Add(CVector3 left, CVector3 right) {
    CVector3 ret = new CVector3(OrangeDotNETModulePINVOKE.CVector3_Add(CVector3.getCPtr(left), CVector3.getCPtr(right)), true);
    if (OrangeDotNETModulePINVOKE.SWIGPendingException.Pending) throw OrangeDotNETModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVector3 Subtract(CVector3 left, CVector3 right) {
    CVector3 ret = new CVector3(OrangeDotNETModulePINVOKE.CVector3_Subtract(CVector3.getCPtr(left), CVector3.getCPtr(right)), true);
    if (OrangeDotNETModulePINVOKE.SWIGPendingException.Pending) throw OrangeDotNETModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVector3 Modulate(CVector3 left, CVector3 right) {
    CVector3 ret = new CVector3(OrangeDotNETModulePINVOKE.CVector3_Modulate(CVector3.getCPtr(left), CVector3.getCPtr(right)), true);
    if (OrangeDotNETModulePINVOKE.SWIGPendingException.Pending) throw OrangeDotNETModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVector3 Multiply(CVector3 value, float scale) {
    CVector3 ret = new CVector3(OrangeDotNETModulePINVOKE.CVector3_Multiply(CVector3.getCPtr(value), scale), true);
    if (OrangeDotNETModulePINVOKE.SWIGPendingException.Pending) throw OrangeDotNETModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVector3 Divide(CVector3 value, float scale) {
    CVector3 ret = new CVector3(OrangeDotNETModulePINVOKE.CVector3_Divide(CVector3.getCPtr(value), scale), true);
    if (OrangeDotNETModulePINVOKE.SWIGPendingException.Pending) throw OrangeDotNETModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
