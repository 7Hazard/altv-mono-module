//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class APIBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal APIBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(APIBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~APIBase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OrangeDotNETMonoPINVOKE.delete_APIBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void LoadClientScript(SWIGTYPE_p_std__string name, string buffer, uint size) {
    OrangeDotNETMonoPINVOKE.APIBase_LoadClientScript(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), buffer, size);
    if (OrangeDotNETMonoPINVOKE.SWIGPendingException.Pending) throw OrangeDotNETMonoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ClientEvent(string name, SWIGTYPE_p_std__vectorT_MValue_t args, int playerid) {
    OrangeDotNETMonoPINVOKE.APIBase_ClientEvent(swigCPtr, name, SWIGTYPE_p_std__vectorT_MValue_t.getCPtr(args), playerid);
    if (OrangeDotNETMonoPINVOKE.SWIGPendingException.Pending) throw OrangeDotNETMonoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void KickPlayer(int playerid) {
    OrangeDotNETMonoPINVOKE.APIBase_KickPlayer(swigCPtr, playerid);
  }

  public virtual bool SetPlayerPosition(int playerid, float x, float y, float z) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerPosition(swigCPtr, playerid, x, y, z);
    return ret;
  }

  public virtual CVector3 GetPlayerPosition(int playerid) {
    CVector3 ret = new CVector3(OrangeDotNETMonoPINVOKE.APIBase_GetPlayerPosition(swigCPtr, playerid), true);
    return ret;
  }

  public virtual bool IsPlayerInRange(int playerid, float x, float y, float z, float range) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_IsPlayerInRange(swigCPtr, playerid, x, y, z, range);
    return ret;
  }

  public virtual bool SetPlayerHeading(int playerid, float angle) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerHeading(swigCPtr, playerid, angle);
    return ret;
  }

  public virtual float GetPlayerHeading(int playerid) {
    float ret = OrangeDotNETMonoPINVOKE.APIBase_GetPlayerHeading(swigCPtr, playerid);
    return ret;
  }

  public virtual bool RemovePlayerWeapons(int playerid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_RemovePlayerWeapons(swigCPtr, playerid);
    return ret;
  }

  public virtual bool GivePlayerWeapon(int playerid, int weapon, int ammo) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GivePlayerWeapon(swigCPtr, playerid, weapon, ammo);
    return ret;
  }

  public virtual bool GivePlayerAmmo(int playerid, int weapon, int ammo) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GivePlayerAmmo(swigCPtr, playerid, weapon, ammo);
    return ret;
  }

  public virtual bool GivePlayerMoney(int playerid, int money) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GivePlayerMoney(swigCPtr, playerid, money);
    return ret;
  }

  public virtual bool SetPlayerMoney(int playerid, int money) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerMoney(swigCPtr, playerid, money);
    return ret;
  }

  public virtual bool ResetPlayerMoney(int playerid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_ResetPlayerMoney(swigCPtr, playerid);
    return ret;
  }

  public virtual uint GetPlayerMoney(int playerid) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_GetPlayerMoney(swigCPtr, playerid);
    return ret;
  }

  public virtual bool SetPlayerModel(int playerid, int model) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerModel(swigCPtr, playerid, model);
    return ret;
  }

  public virtual int GetPlayerModel(int playerid) {
    int ret = OrangeDotNETMonoPINVOKE.APIBase_GetPlayerModel(swigCPtr, playerid);
    return ret;
  }

  public virtual bool SetPlayerName(int playerid, string name) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerName(swigCPtr, playerid, name);
    return ret;
  }

  public virtual SWIGTYPE_p_std__string GetPlayerName(int playerid) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(OrangeDotNETMonoPINVOKE.APIBase_GetPlayerName(swigCPtr, playerid), true);
    return ret;
  }

  public virtual bool SetPlayerHealth(int playerid, float health) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerHealth(swigCPtr, playerid, health);
    return ret;
  }

  public virtual float GetPlayerHealth(int playerid) {
    float ret = OrangeDotNETMonoPINVOKE.APIBase_GetPlayerHealth(swigCPtr, playerid);
    return ret;
  }

  public virtual bool SetPlayerArmour(int playerid, float armour) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerArmour(swigCPtr, playerid, armour);
    return ret;
  }

  public virtual float GetPlayerArmour(int playerid) {
    float ret = OrangeDotNETMonoPINVOKE.APIBase_GetPlayerArmour(swigCPtr, playerid);
    return ret;
  }

  public virtual bool SetPlayerColor(int playerid, uint color) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerColor(swigCPtr, playerid, color);
    return ret;
  }

  public virtual uint GetPlayerColor(int playerid) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_GetPlayerColor(swigCPtr, playerid);
    return ret;
  }

  public virtual void BroadcastClientMessage(string message, uint color) {
    OrangeDotNETMonoPINVOKE.APIBase_BroadcastClientMessage(swigCPtr, message, color);
  }

  public virtual bool SendClientMessage(int playerid, string message, uint color) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SendClientMessage(swigCPtr, playerid, message, color);
    return ret;
  }

  public virtual bool SetPlayerIntoVehicle(int playerid, uint vehicle, char seat) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetPlayerIntoVehicle(swigCPtr, playerid, vehicle, seat);
    return ret;
  }

  public virtual void DisablePlayerHud(int playerid, bool toggle) {
    OrangeDotNETMonoPINVOKE.APIBase_DisablePlayerHud(swigCPtr, playerid, toggle);
  }

  public virtual uint GetPlayerGUID(int playerid) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_GetPlayerGUID(swigCPtr, playerid);
    return ret;
  }

  public virtual void Print(string message) {
    OrangeDotNETMonoPINVOKE.APIBase_Print(swigCPtr, message);
  }

  public virtual int Hash(string str) {
    int ret = OrangeDotNETMonoPINVOKE.APIBase_Hash(swigCPtr, str);
    return ret;
  }

  public virtual uint CreateVehicle(int hash, float x, float y, float z, float heading) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_CreateVehicle(swigCPtr, hash, x, y, z, heading);
    return ret;
  }

  public virtual bool DeleteVehicle(uint guid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_DeleteVehicle(swigCPtr, guid);
    return ret;
  }

  public virtual bool SetVehiclePosition(uint guid, float x, float y, float z) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehiclePosition(swigCPtr, guid, x, y, z);
    return ret;
  }

  public virtual CVector3 GetVehiclePosition(uint guid) {
    CVector3 ret = new CVector3(OrangeDotNETMonoPINVOKE.APIBase_GetVehiclePosition(swigCPtr, guid), true);
    return ret;
  }

  public virtual bool SetVehicleRotation(uint guid, float rx, float ry, float rz) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleRotation(swigCPtr, guid, rx, ry, rz);
    return ret;
  }

  public virtual CVector3 GetVehicleRotation(uint guid) {
    CVector3 ret = new CVector3(OrangeDotNETMonoPINVOKE.APIBase_GetVehicleRotation(swigCPtr, guid), true);
    return ret;
  }

  public virtual bool SetVehicleColours(uint guid, int Color1, int Color2) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleColours(swigCPtr, guid, Color1, Color2);
    return ret;
  }

  public virtual bool GetVehicleColours(uint guid, SWIGTYPE_p_int Color1, SWIGTYPE_p_int Color2) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleColours(swigCPtr, guid, SWIGTYPE_p_int.getCPtr(Color1), SWIGTYPE_p_int.getCPtr(Color2));
    return ret;
  }

  public virtual bool SetVehicleTyresBulletproof(uint guid, bool bulletproof) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleTyresBulletproof(swigCPtr, guid, bulletproof);
    return ret;
  }

  public virtual bool GetVehicleTyresBulletproof(uint guid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleTyresBulletproof(swigCPtr, guid);
    return ret;
  }

  public virtual bool SetVehicleCustomPrimaryColor(uint guid, int rColor, int gColor, int bColor) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleCustomPrimaryColor(swigCPtr, guid, rColor, gColor, bColor);
    return ret;
  }

  public virtual bool GetVehicleCustomPrimaryColor(uint guid, SWIGTYPE_p_int rColor, SWIGTYPE_p_int gColor, SWIGTYPE_p_int bColor) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleCustomPrimaryColor(swigCPtr, guid, SWIGTYPE_p_int.getCPtr(rColor), SWIGTYPE_p_int.getCPtr(gColor), SWIGTYPE_p_int.getCPtr(bColor));
    return ret;
  }

  public virtual bool SetVehicleCustomSecondaryColor(uint guid, int rColor, int gColor, int bColor) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleCustomSecondaryColor(swigCPtr, guid, rColor, gColor, bColor);
    return ret;
  }

  public virtual bool GetVehicleCustomSecondaryColor(uint guid, SWIGTYPE_p_int rColor, SWIGTYPE_p_int gColor, SWIGTYPE_p_int bColor) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleCustomSecondaryColor(swigCPtr, guid, SWIGTYPE_p_int.getCPtr(rColor), SWIGTYPE_p_int.getCPtr(gColor), SWIGTYPE_p_int.getCPtr(bColor));
    return ret;
  }

  public virtual bool SetVehicleEngineStatus(uint guid, bool status, bool locked) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleEngineStatus(swigCPtr, guid, status, locked);
    return ret;
  }

  public virtual bool GetVehicleEngineStatus(uint guid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleEngineStatus(swigCPtr, guid);
    return ret;
  }

  public virtual bool SetVehicleBodyHealth(uint guid, float health) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleBodyHealth(swigCPtr, guid, health);
    return ret;
  }

  public virtual bool SetVehicleEngineHealth(uint guid, float health) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleEngineHealth(swigCPtr, guid, health);
    return ret;
  }

  public virtual bool SetVehicleTankHealth(uint guid, float health) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleTankHealth(swigCPtr, guid, health);
    return ret;
  }

  public virtual bool GetVehicleHealth(uint guid, SWIGTYPE_p_float body, SWIGTYPE_p_float engine, SWIGTYPE_p_float tank) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleHealth(swigCPtr, guid, SWIGTYPE_p_float.getCPtr(body), SWIGTYPE_p_float.getCPtr(engine), SWIGTYPE_p_float.getCPtr(tank));
    return ret;
  }

  public virtual bool SetVehicleNumberPlate(uint guid, string text) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleNumberPlate(swigCPtr, guid, text);
    return ret;
  }

  public virtual SWIGTYPE_p_std__string GetVehicleNumberPlate(uint guid) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(OrangeDotNETMonoPINVOKE.APIBase_GetVehicleNumberPlate(swigCPtr, guid), true);
    return ret;
  }

  public virtual bool SetVehicleNumberPlateStyle(uint guid, int style) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleNumberPlateStyle(swigCPtr, guid, style);
    return ret;
  }

  public virtual int GetVehicleNumberPlateStyle(uint guid) {
    int ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleNumberPlateStyle(swigCPtr, guid);
    return ret;
  }

  public virtual bool SetVehicleSirenState(uint guid, bool state) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleSirenState(swigCPtr, guid, state);
    return ret;
  }

  public virtual bool GetVehicleSirenState(uint guid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleSirenState(swigCPtr, guid);
    return ret;
  }

  public virtual bool SetVehicleWheelColor(uint guid, int color) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleWheelColor(swigCPtr, guid, color);
    return ret;
  }

  public virtual int GetVehicleWheelColor(uint guid) {
    int ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleWheelColor(swigCPtr, guid);
    return ret;
  }

  public virtual bool SetVehicleWheelType(uint guid, int type) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetVehicleWheelType(swigCPtr, guid, type);
    return ret;
  }

  public virtual int GetVehicleWheelType(uint guid) {
    int ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleWheelType(swigCPtr, guid);
    return ret;
  }

  public virtual uint GetVehicleDriver(uint guid) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_GetVehicleDriver(swigCPtr, guid);
    return ret;
  }

  public virtual SWIGTYPE_p_std__vectorT_unsigned_long_t GetVehiclePassengers(uint guid) {
    SWIGTYPE_p_std__vectorT_unsigned_long_t ret = new SWIGTYPE_p_std__vectorT_unsigned_long_t(OrangeDotNETMonoPINVOKE.APIBase_GetVehiclePassengers(swigCPtr, guid), true);
    return ret;
  }

  public virtual uint CreateObject(int model, float x, float y, float z, float pitch, float yaw, float roll) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_CreateObject(swigCPtr, model, x, y, z, pitch, yaw, roll);
    return ret;
  }

  public virtual bool DeleteObject(uint guid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_DeleteObject(swigCPtr, guid);
    return ret;
  }

  public virtual bool CreatePickup(int type, float x, float y, float z, float scale) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_CreatePickup(swigCPtr, type, x, y, z, scale);
    return ret;
  }

  public virtual uint CreateBlipForAll(SWIGTYPE_p_std__string name, float x, float y, float z, float scale, int color, int sprite) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_CreateBlipForAll(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), x, y, z, scale, color, sprite);
    if (OrangeDotNETMonoPINVOKE.SWIGPendingException.Pending) throw OrangeDotNETMonoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint CreateBlipForPlayer(int playerid, SWIGTYPE_p_std__string name, float x, float y, float z, float scale, int color, int sprite) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_CreateBlipForPlayer(swigCPtr, playerid, SWIGTYPE_p_std__string.getCPtr(name), x, y, z, scale, color, sprite);
    if (OrangeDotNETMonoPINVOKE.SWIGPendingException.Pending) throw OrangeDotNETMonoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void DeleteBlip(uint guid) {
    OrangeDotNETMonoPINVOKE.APIBase_DeleteBlip(swigCPtr, guid);
  }

  public virtual void SetBlipColor(uint guid, int color) {
    OrangeDotNETMonoPINVOKE.APIBase_SetBlipColor(swigCPtr, guid, color);
  }

  public virtual void SetBlipScale(uint guid, float scale) {
    OrangeDotNETMonoPINVOKE.APIBase_SetBlipScale(swigCPtr, guid, scale);
  }

  public virtual void SetBlipRoute(uint guid, bool route) {
    OrangeDotNETMonoPINVOKE.APIBase_SetBlipRoute(swigCPtr, guid, route);
  }

  public virtual void SetBlipSprite(uint guid, int sprite) {
    OrangeDotNETMonoPINVOKE.APIBase_SetBlipSprite(swigCPtr, guid, sprite);
  }

  public virtual void SetBlipName(uint guid, SWIGTYPE_p_std__string name) {
    OrangeDotNETMonoPINVOKE.APIBase_SetBlipName(swigCPtr, guid, SWIGTYPE_p_std__string.getCPtr(name));
    if (OrangeDotNETMonoPINVOKE.SWIGPendingException.Pending) throw OrangeDotNETMonoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetBlipAsShortRange(uint guid, bool _short) {
    OrangeDotNETMonoPINVOKE.APIBase_SetBlipAsShortRange(swigCPtr, guid, _short);
  }

  public virtual void AttachBlipToPlayer(uint _guid, int player) {
    OrangeDotNETMonoPINVOKE.APIBase_AttachBlipToPlayer(swigCPtr, _guid, player);
  }

  public virtual void AttachBlipToVehicle(uint _guid, uint vehicle) {
    OrangeDotNETMonoPINVOKE.APIBase_AttachBlipToVehicle(swigCPtr, _guid, vehicle);
  }

  public virtual uint CreateMarkerForAll(float x, float y, float z, float height, float radius) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_CreateMarkerForAll(swigCPtr, x, y, z, height, radius);
    return ret;
  }

  public virtual uint CreateMarkerForPlayer(int playerid, float x, float y, float z, float height, float radius) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_CreateMarkerForPlayer(swigCPtr, playerid, x, y, z, height, radius);
    return ret;
  }

  public virtual void DeleteMarker(uint guid) {
    OrangeDotNETMonoPINVOKE.APIBase_DeleteMarker(swigCPtr, guid);
  }

  public virtual bool SendNotification(int playerid, string msg) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SendNotification(swigCPtr, playerid, msg);
    return ret;
  }

  public virtual bool SetInfoMsg(int playerid, string msg) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_SetInfoMsg(swigCPtr, playerid, msg);
    return ret;
  }

  public virtual bool UnsetInfoMsg(int playerid) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_UnsetInfoMsg(swigCPtr, playerid);
    return ret;
  }

  public virtual uint Create3DText(string text, float x, float y, float z, int color, int outColor, float fontSize) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_Create3DText(swigCPtr, text, x, y, z, color, outColor, fontSize);
    return ret;
  }

  public virtual uint Create3DTextForPlayer(uint player, string text, float x, float y, float z, int color, int outColor) {
    uint ret = OrangeDotNETMonoPINVOKE.APIBase_Create3DTextForPlayer(swigCPtr, player, text, x, y, z, color, outColor);
    return ret;
  }

  public virtual bool Attach3DTextToVehicle(uint textId, uint vehicle, float oX, float oY, float oZ) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_Attach3DTextToVehicle(swigCPtr, textId, vehicle, oX, oY, oZ);
    return ret;
  }

  public virtual bool Attach3DTextToPlayer(uint textId, uint player, float oX, float oY, float oZ) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_Attach3DTextToPlayer(swigCPtr, textId, player, oX, oY, oZ);
    return ret;
  }

  public virtual bool Set3DTextContent(uint textId, string text) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_Set3DTextContent(swigCPtr, textId, text);
    return ret;
  }

  public virtual bool Delete3DText(uint textId) {
    bool ret = OrangeDotNETMonoPINVOKE.APIBase_Delete3DText(swigCPtr, textId);
    return ret;
  }

}
